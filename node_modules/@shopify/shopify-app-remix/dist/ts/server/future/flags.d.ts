import type { ConfigParams, Shopify, ShopifyRestResources } from '@shopify/shopify-api';
import { AppConfig } from '../config-types';
export interface FutureFlags {
    /**
     * When enabled, embedded apps will fetch access tokens via [token exchange](https://shopify.dev/docs/apps/auth/get-access-tokens/token-exchange).
     * This assumes the app has scopes declared for [Shopify managing installation](https://shopify.dev/docs/apps/auth/installation#shopify-managed-installation).
     *
     * Learn more about this [new embedded app auth strategy](https://shopify.dev/docs/api/shopify-app-remix#embedded-auth-strategy).
     *
     * @default false
     */
    unstable_newEmbeddedAuthStrategy?: boolean;
    /**
     * When enabled, the Scopes API will be available. This feature is in development and requires special permissions from Shopify for now.
     *
     * @default false
     */
    wip_optionalScopesApi?: boolean;
}
export interface ApiFutureFlags<_Future extends FutureFlagOptions> {
    lineItemBilling: true;
    unstable_managedPricingSupport: true;
}
export type ApiConfigWithFutureFlags<Future extends FutureFlagOptions> = ConfigParams<ShopifyRestResources, ApiFutureFlags<Future>>;
export type FutureFlagOptions = FutureFlags | undefined;
export type FeatureEnabled<Future extends FutureFlagOptions, Flag extends keyof FutureFlags> = Future extends FutureFlags ? Future[Flag] extends true ? true : false : false;
export declare function logDisabledFutureFlags(config: AppConfig, logger: Shopify['logger']): void;
//# sourceMappingURL=flags.d.ts.map