import {
  ApiVersion,
  DataType
} from "./chunk-K6YA4N3P.js";
import {
  RestResourceError
} from "./chunk-SF3SORXG.js";
import {
  __privateAdd,
  __privateGet,
  __privateSet,
  __publicField
} from "./chunk-VRMXEQCD.js";

// node_modules/@shopify/shopify-api/dist/esm/rest/base.mjs
var _session;
var Base = class {
  constructor({ session, fromData }) {
    __privateAdd(this, _session);
    __privateSet(this, _session, session);
    if (fromData) {
      this.setData(fromData);
    }
  }
  static setClassProperties({ Client, config }) {
    this.Client = Client;
    this.config = config;
  }
  static async baseFind({ session, urlIds, params, requireIds = false }) {
    if (requireIds) {
      const hasIds = Object.entries(urlIds).some(([_key, value]) => value);
      if (!hasIds) {
        throw new RestResourceError("No IDs given for request, cannot find path");
      }
    }
    const response = await this.request({
      http_method: "get",
      operation: "get",
      session,
      urlIds,
      params
    });
    return {
      data: this.createInstancesFromResponse(session, response.body),
      headers: response.headers,
      pageInfo: response.pageInfo
    };
  }
  static async request({ session, http_method, operation, urlIds, params, body, entity }) {
    const client = new this.Client({
      session,
      apiVersion: this.apiVersion
    });
    const path = this.getPath({ http_method, operation, urlIds, entity });
    const cleanParams = {};
    if (params) {
      for (const key in params) {
        if (params[key] !== null) {
          cleanParams[key] = params[key];
        }
      }
    }
    switch (http_method) {
      case "get":
        return client.get({ path, query: cleanParams });
      case "post":
        return client.post({
          path,
          query: cleanParams,
          data: body,
          type: DataType.JSON
        });
      case "put":
        return client.put({
          path,
          query: cleanParams,
          data: body,
          type: DataType.JSON
        });
      case "delete":
        return client.delete({ path, query: cleanParams });
      default:
        throw new Error(`Unrecognized HTTP method "${http_method}"`);
    }
  }
  static getJsonBodyName() {
    return this.name.replace(/([a-z])([A-Z])/g, "$1_$2").toLowerCase();
  }
  static getPath({ http_method, operation, urlIds, entity }) {
    let match = null;
    let specificity = -1;
    const potentialPaths = [];
    this.paths.forEach((path) => {
      if (http_method !== path.http_method || operation !== path.operation || path.ids.length <= specificity) {
        return;
      }
      potentialPaths.push(path);
      let pathUrlIds = { ...urlIds };
      path.ids.forEach((id) => {
        if (!pathUrlIds[id] && entity && entity[id]) {
          pathUrlIds[id] = entity[id];
        }
      });
      pathUrlIds = Object.entries(pathUrlIds).reduce((acc, [key, value]) => {
        if (value) {
          acc[key] = value;
        }
        return acc;
      }, {});
      const diff = path.ids.reduce((acc, id) => pathUrlIds[id] ? acc : acc.concat(id), []);
      if (diff.length > 0) {
        return;
      }
      specificity = path.ids.length;
      match = path.path.replace(/(<([^>]+)>)/g, (_m1, _m2, id) => `${pathUrlIds[id]}`);
    });
    if (!match) {
      const pathOptions = potentialPaths.map((path) => path.path);
      throw new RestResourceError(`Could not find a path for request. If you are trying to make a request to one of the following paths, ensure all relevant IDs are set. :
 - ${pathOptions.join("\n - ")}`);
    }
    if (this.customPrefix) {
      return `${this.customPrefix}/${match}`;
    } else {
      return match;
    }
  }
  static createInstancesFromResponse(session, data) {
    let instances = [];
    this.resourceNames.forEach((resourceName) => {
      const singular = resourceName.singular;
      const plural = resourceName.plural;
      if (data[plural] || Array.isArray(data[singular])) {
        instances = instances.concat((data[plural] || data[singular]).reduce((acc, entry) => acc.concat(this.createInstance(session, entry)), []));
      } else if (data[singular]) {
        instances.push(this.createInstance(session, data[singular]));
      }
    });
    return instances;
  }
  static createInstance(session, data, prevInstance) {
    const instance = prevInstance ? prevInstance : new this({ session });
    if (data) {
      instance.setData(data);
    }
    return instance;
  }
  get session() {
    return __privateGet(this, _session);
  }
  async save({ update = false } = {}) {
    const { primaryKey, resourceNames } = this.resource();
    const method = this[primaryKey] ? "put" : "post";
    const data = this.serialize(true);
    const response = await this.resource().request({
      http_method: method,
      operation: method,
      session: this.session,
      urlIds: {},
      body: { [this.resource().getJsonBodyName()]: data },
      entity: this
    });
    const flattenResourceNames = resourceNames.reduce((acc, obj) => {
      return acc.concat(Object.values(obj));
    }, []);
    const matchResourceName = Object.keys(response.body).filter((key) => flattenResourceNames.includes(key));
    const body = response.body[matchResourceName[0]];
    if (update && body) {
      this.setData(body);
    }
  }
  async saveAndUpdate() {
    await this.save({ update: true });
  }
  async delete() {
    await this.resource().request({
      http_method: "delete",
      operation: "delete",
      session: this.session,
      urlIds: {},
      entity: this
    });
  }
  serialize(saving = false) {
    const { hasMany, hasOne, readOnlyAttributes } = this.resource();
    return Object.entries(this).reduce((acc, [attribute, value]) => {
      if (["#session"].includes(attribute) || saving && readOnlyAttributes.includes(attribute)) {
        return acc;
      }
      if (attribute in hasMany && value) {
        acc[attribute] = value.reduce((attrAcc, entry) => {
          return attrAcc.concat(this.serializeSubAttribute(entry, saving));
        }, []);
      } else if (attribute in hasOne && value) {
        acc[attribute] = this.serializeSubAttribute(value, saving);
      } else {
        acc[attribute] = value;
      }
      return acc;
    }, {});
  }
  toJSON() {
    return this.serialize();
  }
  request(args) {
    return this.resource().request(args);
  }
  setData(data) {
    const { hasMany, hasOne } = this.resource();
    Object.entries(data).forEach(([attribute, val]) => {
      if (attribute in hasMany) {
        const HasManyResource = hasMany[attribute];
        this[attribute] = [];
        val.forEach((entry) => {
          const obj = new HasManyResource({ session: this.session });
          if (entry) {
            obj.setData(entry);
          }
          this[attribute].push(obj);
        });
      } else if (attribute in hasOne) {
        const HasOneResource = hasOne[attribute];
        const obj = new HasOneResource({ session: this.session });
        if (val) {
          obj.setData(val);
        }
        this[attribute] = obj;
      } else {
        this[attribute] = val;
      }
    });
  }
  resource() {
    return this.constructor;
  }
  serializeSubAttribute(attribute, saving) {
    return attribute.serialize ? attribute.serialize(saving) : this.resource().createInstance(this.session, attribute).serialize(saving);
  }
};
_session = new WeakMap();
__publicField(Base, "Client");
__publicField(Base, "config");
__publicField(Base, "apiVersion");
__publicField(Base, "resourceNames", []);
__publicField(Base, "primaryKey", "id");
__publicField(Base, "customPrefix", null);
__publicField(Base, "readOnlyAttributes", []);
__publicField(Base, "hasOne", {});
__publicField(Base, "hasMany", {});
__publicField(Base, "paths", []);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/currency.mjs
var Currency = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "currency");
    __publicField(this, "rate_updated_at");
  }
  static async all({ session, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: {},
      params: { ...otherArgs }
    });
    return response;
  }
};
__publicField(Currency, "apiVersion", ApiVersion.July24);
__publicField(Currency, "hasOne", {});
__publicField(Currency, "hasMany", {});
__publicField(Currency, "paths", [
  { "http_method": "get", "operation": "get", "ids": [], "path": "currencies.json" }
]);
__publicField(Currency, "resourceNames", [
  {
    "singular": "currency",
    "plural": "currencies"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/metafield.mjs
var Metafield = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "key");
    __publicField(this, "namespace");
    __publicField(this, "value");
    __publicField(this, "article_id");
    __publicField(this, "blog_id");
    __publicField(this, "collection_id");
    __publicField(this, "created_at");
    __publicField(this, "customer_id");
    __publicField(this, "description");
    __publicField(this, "draft_order_id");
    __publicField(this, "id");
    __publicField(this, "order_id");
    __publicField(this, "owner_id");
    __publicField(this, "owner_resource");
    __publicField(this, "page_id");
    __publicField(this, "product_id");
    __publicField(this, "product_image_id");
    __publicField(this, "type");
    __publicField(this, "updated_at");
    __publicField(this, "variant_id");
  }
  static async find({ session, id, article_id = null, blog_id = null, collection_id = null, customer_id = null, draft_order_id = null, order_id = null, page_id = null, product_image_id = null, product_id = null, variant_id = null, fields = null }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id, "article_id": article_id, "blog_id": blog_id, "collection_id": collection_id, "customer_id": customer_id, "draft_order_id": draft_order_id, "order_id": order_id, "page_id": page_id, "product_image_id": product_image_id, "product_id": product_id, "variant_id": variant_id },
      params: { "fields": fields }
    });
    return result.data ? result.data[0] : null;
  }
  static async delete({ session, id, article_id = null, blog_id = null, collection_id = null, customer_id = null, draft_order_id = null, order_id = null, page_id = null, product_image_id = null, product_id = null, variant_id = null }) {
    const response = await this.request({
      http_method: "delete",
      operation: "delete",
      session,
      urlIds: { "id": id, "article_id": article_id, "blog_id": blog_id, "collection_id": collection_id, "customer_id": customer_id, "draft_order_id": draft_order_id, "order_id": order_id, "page_id": page_id, "product_image_id": product_image_id, "product_id": product_id, "variant_id": variant_id },
      params: {}
    });
    return response ? response.body : null;
  }
  static async all({ session, article_id = null, blog_id = null, collection_id = null, customer_id = null, draft_order_id = null, order_id = null, page_id = null, product_image_id = null, product_id = null, variant_id = null, limit = null, since_id = null, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, namespace = null, key = null, type = null, fields = null, metafield = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: { "article_id": article_id, "blog_id": blog_id, "collection_id": collection_id, "customer_id": customer_id, "draft_order_id": draft_order_id, "order_id": order_id, "page_id": page_id, "product_image_id": product_image_id, "product_id": product_id, "variant_id": variant_id },
      params: { "limit": limit, "since_id": since_id, "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "namespace": namespace, "key": key, "type": type, "fields": fields, "metafield": metafield, ...otherArgs }
    });
    return response;
  }
  static async count({ session, article_id = null, blog_id = null, collection_id = null, customer_id = null, draft_order_id = null, order_id = null, page_id = null, product_image_id = null, product_id = null, variant_id = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "get",
      operation: "count",
      session,
      urlIds: { "article_id": article_id, "blog_id": blog_id, "collection_id": collection_id, "customer_id": customer_id, "draft_order_id": draft_order_id, "order_id": order_id, "page_id": page_id, "product_image_id": product_image_id, "product_id": product_id, "variant_id": variant_id },
      params: { ...otherArgs },
      body: {},
      entity: null
    });
    return response ? response.body : null;
  }
};
__publicField(Metafield, "apiVersion", ApiVersion.July24);
__publicField(Metafield, "hasOne", {});
__publicField(Metafield, "hasMany", {});
__publicField(Metafield, "paths", [
  { "http_method": "delete", "operation": "delete", "ids": ["article_id", "id"], "path": "articles/<article_id>/metafields/<id>.json" },
  { "http_method": "delete", "operation": "delete", "ids": ["blog_id", "id"], "path": "blogs/<blog_id>/metafields/<id>.json" },
  { "http_method": "delete", "operation": "delete", "ids": ["blog_id", "id"], "path": "blogs/<blog_id>/metafields/<id>.json" },
  { "http_method": "delete", "operation": "delete", "ids": ["collection_id", "id"], "path": "collections/<collection_id>/metafields/<id>.json" },
  { "http_method": "delete", "operation": "delete", "ids": ["customer_id", "id"], "path": "customers/<customer_id>/metafields/<id>.json" },
  { "http_method": "delete", "operation": "delete", "ids": ["draft_order_id", "id"], "path": "draft_orders/<draft_order_id>/metafields/<id>.json" },
  { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "metafields/<id>.json" },
  { "http_method": "delete", "operation": "delete", "ids": ["order_id", "id"], "path": "orders/<order_id>/metafields/<id>.json" },
  { "http_method": "delete", "operation": "delete", "ids": ["page_id", "id"], "path": "pages/<page_id>/metafields/<id>.json" },
  { "http_method": "delete", "operation": "delete", "ids": ["product_image_id", "id"], "path": "product_images/<product_image_id>/metafields/<id>.json" },
  { "http_method": "delete", "operation": "delete", "ids": ["product_id", "id"], "path": "products/<product_id>/metafields/<id>.json" },
  { "http_method": "delete", "operation": "delete", "ids": ["variant_id", "id"], "path": "variants/<variant_id>/metafields/<id>.json" },
  { "http_method": "get", "operation": "count", "ids": ["article_id"], "path": "articles/<article_id>/metafields/count.json" },
  { "http_method": "get", "operation": "count", "ids": ["blog_id"], "path": "blogs/<blog_id>/metafields/count.json" },
  { "http_method": "get", "operation": "count", "ids": ["blog_id"], "path": "blogs/<blog_id>/metafields/count.json" },
  { "http_method": "get", "operation": "count", "ids": ["collection_id"], "path": "collections/<collection_id>/metafields/count.json" },
  { "http_method": "get", "operation": "count", "ids": ["customer_id"], "path": "customers/<customer_id>/metafields/count.json" },
  { "http_method": "get", "operation": "count", "ids": ["draft_order_id"], "path": "draft_orders/<draft_order_id>/metafields/count.json" },
  { "http_method": "get", "operation": "count", "ids": [], "path": "metafields/count.json" },
  { "http_method": "get", "operation": "count", "ids": ["order_id"], "path": "orders/<order_id>/metafields/count.json" },
  { "http_method": "get", "operation": "count", "ids": ["page_id"], "path": "pages/<page_id>/metafields/count.json" },
  { "http_method": "get", "operation": "count", "ids": ["product_image_id"], "path": "product_images/<product_image_id>/metafields/count.json" },
  { "http_method": "get", "operation": "count", "ids": ["product_id"], "path": "products/<product_id>/metafields/count.json" },
  { "http_method": "get", "operation": "count", "ids": ["variant_id"], "path": "variants/<variant_id>/metafields/count.json" },
  { "http_method": "get", "operation": "get", "ids": ["article_id"], "path": "articles/<article_id>/metafields.json" },
  { "http_method": "get", "operation": "get", "ids": ["article_id", "id"], "path": "articles/<article_id>/metafields/<id>.json" },
  { "http_method": "get", "operation": "get", "ids": ["blog_id"], "path": "blogs/<blog_id>/metafields.json" },
  { "http_method": "get", "operation": "get", "ids": ["blog_id"], "path": "blogs/<blog_id>/metafields.json" },
  { "http_method": "get", "operation": "get", "ids": ["blog_id", "id"], "path": "blogs/<blog_id>/metafields/<id>.json" },
  { "http_method": "get", "operation": "get", "ids": ["blog_id", "id"], "path": "blogs/<blog_id>/metafields/<id>.json" },
  { "http_method": "get", "operation": "get", "ids": ["collection_id"], "path": "collections/<collection_id>/metafields.json" },
  { "http_method": "get", "operation": "get", "ids": ["collection_id", "id"], "path": "collections/<collection_id>/metafields/<id>.json" },
  { "http_method": "get", "operation": "get", "ids": ["customer_id"], "path": "customers/<customer_id>/metafields.json" },
  { "http_method": "get", "operation": "get", "ids": ["customer_id", "id"], "path": "customers/<customer_id>/metafields/<id>.json" },
  { "http_method": "get", "operation": "get", "ids": ["draft_order_id"], "path": "draft_orders/<draft_order_id>/metafields.json" },
  { "http_method": "get", "operation": "get", "ids": ["draft_order_id", "id"], "path": "draft_orders/<draft_order_id>/metafields/<id>.json" },
  { "http_method": "get", "operation": "get", "ids": [], "path": "metafields.json" },
  { "http_method": "get", "operation": "get", "ids": ["id"], "path": "metafields/<id>.json" },
  { "http_method": "get", "operation": "get", "ids": ["order_id"], "path": "orders/<order_id>/metafields.json" },
  { "http_method": "get", "operation": "get", "ids": ["order_id", "id"], "path": "orders/<order_id>/metafields/<id>.json" },
  { "http_method": "get", "operation": "get", "ids": ["page_id"], "path": "pages/<page_id>/metafields.json" },
  { "http_method": "get", "operation": "get", "ids": ["page_id", "id"], "path": "pages/<page_id>/metafields/<id>.json" },
  { "http_method": "get", "operation": "get", "ids": ["product_image_id"], "path": "product_images/<product_image_id>/metafields.json" },
  { "http_method": "get", "operation": "get", "ids": ["product_image_id", "id"], "path": "product_images/<product_image_id>/metafields/<id>.json" },
  { "http_method": "get", "operation": "get", "ids": ["product_id"], "path": "products/<product_id>/metafields.json" },
  { "http_method": "get", "operation": "get", "ids": ["product_id", "id"], "path": "products/<product_id>/metafields/<id>.json" },
  { "http_method": "get", "operation": "get", "ids": ["variant_id"], "path": "variants/<variant_id>/metafields.json" },
  { "http_method": "get", "operation": "get", "ids": ["variant_id", "id"], "path": "variants/<variant_id>/metafields/<id>.json" },
  { "http_method": "post", "operation": "post", "ids": ["article_id"], "path": "articles/<article_id>/metafields.json" },
  { "http_method": "post", "operation": "post", "ids": ["blog_id"], "path": "blogs/<blog_id>/metafields.json" },
  { "http_method": "post", "operation": "post", "ids": ["blog_id"], "path": "blogs/<blog_id>/metafields.json" },
  { "http_method": "post", "operation": "post", "ids": ["collection_id"], "path": "collections/<collection_id>/metafields.json" },
  { "http_method": "post", "operation": "post", "ids": ["customer_id"], "path": "customers/<customer_id>/metafields.json" },
  { "http_method": "post", "operation": "post", "ids": ["draft_order_id"], "path": "draft_orders/<draft_order_id>/metafields.json" },
  { "http_method": "post", "operation": "post", "ids": [], "path": "metafields.json" },
  { "http_method": "post", "operation": "post", "ids": ["order_id"], "path": "orders/<order_id>/metafields.json" },
  { "http_method": "post", "operation": "post", "ids": ["page_id"], "path": "pages/<page_id>/metafields.json" },
  { "http_method": "post", "operation": "post", "ids": ["product_image_id"], "path": "product_images/<product_image_id>/metafields.json" },
  { "http_method": "post", "operation": "post", "ids": ["product_id"], "path": "products/<product_id>/metafields.json" },
  { "http_method": "post", "operation": "post", "ids": ["variant_id"], "path": "variants/<variant_id>/metafields.json" },
  { "http_method": "put", "operation": "put", "ids": ["article_id", "id"], "path": "articles/<article_id>/metafields/<id>.json" },
  { "http_method": "put", "operation": "put", "ids": ["blog_id", "id"], "path": "blogs/<blog_id>/metafields/<id>.json" },
  { "http_method": "put", "operation": "put", "ids": ["blog_id", "id"], "path": "blogs/<blog_id>/metafields/<id>.json" },
  { "http_method": "put", "operation": "put", "ids": ["collection_id", "id"], "path": "collections/<collection_id>/metafields/<id>.json" },
  { "http_method": "put", "operation": "put", "ids": ["customer_id", "id"], "path": "customers/<customer_id>/metafields/<id>.json" },
  { "http_method": "put", "operation": "put", "ids": ["draft_order_id", "id"], "path": "draft_orders/<draft_order_id>/metafields/<id>.json" },
  { "http_method": "put", "operation": "put", "ids": ["id"], "path": "metafields/<id>.json" },
  { "http_method": "put", "operation": "put", "ids": ["order_id", "id"], "path": "orders/<order_id>/metafields/<id>.json" },
  { "http_method": "put", "operation": "put", "ids": ["page_id", "id"], "path": "pages/<page_id>/metafields/<id>.json" },
  { "http_method": "put", "operation": "put", "ids": ["product_image_id", "id"], "path": "product_images/<product_image_id>/metafields/<id>.json" },
  { "http_method": "put", "operation": "put", "ids": ["product_id", "id"], "path": "products/<product_id>/metafields/<id>.json" },
  { "http_method": "put", "operation": "put", "ids": ["variant_id", "id"], "path": "variants/<variant_id>/metafields/<id>.json" }
]);
__publicField(Metafield, "resourceNames", [
  {
    "singular": "metafield",
    "plural": "metafields"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/customer.mjs
var Customer = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "accepts_marketing");
    __publicField(this, "accepts_marketing_updated_at");
    __publicField(this, "addresses");
    __publicField(this, "created_at");
    __publicField(this, "currency");
    __publicField(this, "default_address");
    __publicField(this, "email");
    __publicField(this, "email_marketing_consent");
    __publicField(this, "first_name");
    __publicField(this, "id");
    __publicField(this, "last_name");
    __publicField(this, "last_order_id");
    __publicField(this, "last_order_name");
    __publicField(this, "marketing_opt_in_level");
    __publicField(this, "metafield");
    __publicField(this, "multipass_identifier");
    __publicField(this, "note");
    __publicField(this, "orders_count");
    __publicField(this, "password");
    __publicField(this, "password_confirmation");
    __publicField(this, "phone");
    __publicField(this, "sms_marketing_consent");
    __publicField(this, "state");
    __publicField(this, "tags");
    __publicField(this, "tax_exempt");
    __publicField(this, "tax_exemptions");
    __publicField(this, "total_spent");
    __publicField(this, "updated_at");
    __publicField(this, "verified_email");
  }
  static async find({ session, id, fields = null }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id },
      params: { "fields": fields }
    });
    return result.data ? result.data[0] : null;
  }
  static async delete({ session, id }) {
    const response = await this.request({
      http_method: "delete",
      operation: "delete",
      session,
      urlIds: { "id": id },
      params: {}
    });
    return response ? response.body : null;
  }
  static async all({ session, ids = null, since_id = null, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, limit = null, fields = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: {},
      params: { "ids": ids, "since_id": since_id, "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "limit": limit, "fields": fields, ...otherArgs }
    });
    return response;
  }
  static async count({ session, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "get",
      operation: "count",
      session,
      urlIds: {},
      params: { "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, ...otherArgs },
      body: {},
      entity: null
    });
    return response ? response.body : null;
  }
  static async orders({ session, id, status = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "get",
      operation: "orders",
      session,
      urlIds: { "id": id },
      params: { "status": status, ...otherArgs },
      body: {},
      entity: null
    });
    return response ? response.body : null;
  }
  static async search({ session, order = null, query = null, limit = null, fields = null, returnFullResponse = false, ...otherArgs }) {
    const response = await this.request({
      http_method: "get",
      operation: "search",
      session,
      urlIds: {},
      params: { "order": order, "query": query, "limit": limit, "fields": fields, ...otherArgs },
      body: {},
      entity: null
    });
    return returnFullResponse ? response : response == null ? void 0 : response.body;
  }
  async account_activation_url({ body = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "post",
      operation: "account_activation_url",
      session: this.session,
      urlIds: { "id": this.id },
      params: { ...otherArgs },
      body,
      entity: this
    });
    return response ? response.body : null;
  }
  async send_invite({ body = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "post",
      operation: "send_invite",
      session: this.session,
      urlIds: { "id": this.id },
      params: { ...otherArgs },
      body,
      entity: this
    });
    return response ? response.body : null;
  }
};
__publicField(Customer, "apiVersion", ApiVersion.July24);
__publicField(Customer, "hasOne", {
  "metafield": Metafield
});
__publicField(Customer, "hasMany", {});
__publicField(Customer, "paths", [
  { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "customers/<id>.json" },
  { "http_method": "get", "operation": "count", "ids": [], "path": "customers/count.json" },
  { "http_method": "get", "operation": "get", "ids": [], "path": "customers.json" },
  { "http_method": "get", "operation": "get", "ids": ["id"], "path": "customers/<id>.json" },
  { "http_method": "get", "operation": "orders", "ids": ["id"], "path": "customers/<id>/orders.json" },
  { "http_method": "get", "operation": "search", "ids": [], "path": "customers/search.json" },
  { "http_method": "post", "operation": "account_activation_url", "ids": ["id"], "path": "customers/<id>/account_activation_url.json" },
  { "http_method": "post", "operation": "post", "ids": [], "path": "customers.json" },
  { "http_method": "post", "operation": "send_invite", "ids": ["id"], "path": "customers/<id>/send_invite.json" },
  { "http_method": "put", "operation": "put", "ids": ["id"], "path": "customers/<id>.json" }
]);
__publicField(Customer, "resourceNames", [
  {
    "singular": "customer",
    "plural": "customers"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/discount_code.mjs
var DiscountCode = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "code");
    __publicField(this, "created_at");
    __publicField(this, "errors");
    __publicField(this, "id");
    __publicField(this, "price_rule_id");
    __publicField(this, "updated_at");
    __publicField(this, "usage_count");
  }
  static async find({ session, id, price_rule_id = null }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id, "price_rule_id": price_rule_id },
      params: {}
    });
    return result.data ? result.data[0] : null;
  }
  static async delete({ session, id, price_rule_id = null }) {
    const response = await this.request({
      http_method: "delete",
      operation: "delete",
      session,
      urlIds: { "id": id, "price_rule_id": price_rule_id },
      params: {}
    });
    return response ? response.body : null;
  }
  static async all({ session, price_rule_id = null, batch_id = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: { "price_rule_id": price_rule_id, "batch_id": batch_id },
      params: { ...otherArgs }
    });
    return response;
  }
  static async count({ session, times_used = null, times_used_min = null, times_used_max = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "get",
      operation: "count",
      session,
      urlIds: {},
      params: { "times_used": times_used, "times_used_min": times_used_min, "times_used_max": times_used_max, ...otherArgs },
      body: {},
      entity: null
    });
    return response ? response.body : null;
  }
  static async get_all({ session, price_rule_id = null, batch_id = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "get",
      operation: "get_all",
      session,
      urlIds: { "price_rule_id": price_rule_id, "batch_id": batch_id },
      params: { ...otherArgs },
      body: {},
      entity: null
    });
    return response ? response.body : null;
  }
  static async lookup({ session, code = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "get",
      operation: "lookup",
      session,
      urlIds: {},
      params: { "code": code, ...otherArgs },
      body: {},
      entity: null
    });
    return response ? response.body : null;
  }
  async batch({ body = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "post",
      operation: "batch",
      session: this.session,
      urlIds: { "price_rule_id": this.price_rule_id },
      params: { ...otherArgs },
      body,
      entity: this
    });
    return response ? response.body : null;
  }
};
__publicField(DiscountCode, "apiVersion", ApiVersion.July24);
__publicField(DiscountCode, "hasOne", {});
__publicField(DiscountCode, "hasMany", {});
__publicField(DiscountCode, "paths", [
  { "http_method": "delete", "operation": "delete", "ids": ["price_rule_id", "id"], "path": "price_rules/<price_rule_id>/discount_codes/<id>.json" },
  { "http_method": "get", "operation": "count", "ids": [], "path": "discount_codes/count.json" },
  { "http_method": "get", "operation": "get", "ids": ["price_rule_id", "batch_id"], "path": "price_rules/<price_rule_id>/batch/<batch_id>/discount_codes.json" },
  { "http_method": "get", "operation": "get", "ids": ["price_rule_id"], "path": "price_rules/<price_rule_id>/discount_codes.json" },
  { "http_method": "get", "operation": "get", "ids": ["price_rule_id", "id"], "path": "price_rules/<price_rule_id>/discount_codes/<id>.json" },
  { "http_method": "get", "operation": "get_all", "ids": ["price_rule_id", "batch_id"], "path": "price_rules/<price_rule_id>/batch/<batch_id>.json" },
  { "http_method": "get", "operation": "lookup", "ids": [], "path": "discount_codes/lookup.json" },
  { "http_method": "post", "operation": "batch", "ids": ["price_rule_id"], "path": "price_rules/<price_rule_id>/batch.json" },
  { "http_method": "post", "operation": "post", "ids": ["price_rule_id"], "path": "price_rules/<price_rule_id>/discount_codes.json" },
  { "http_method": "put", "operation": "put", "ids": ["price_rule_id", "id"], "path": "price_rules/<price_rule_id>/discount_codes/<id>.json" }
]);
__publicField(DiscountCode, "resourceNames", [
  {
    "singular": "discount_code",
    "plural": "discount_codes"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/abandoned_checkout.mjs
var AbandonedCheckout = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "abandoned_checkout_url");
    __publicField(this, "billing_address");
    __publicField(this, "buyer_accepts_marketing");
    __publicField(this, "buyer_accepts_sms_marketing");
    __publicField(this, "cart_token");
    __publicField(this, "closed_at");
    __publicField(this, "completed_at");
    __publicField(this, "created_at");
    __publicField(this, "currency");
    __publicField(this, "customer");
    __publicField(this, "customer_locale");
    __publicField(this, "device_id");
    __publicField(this, "discount_codes");
    __publicField(this, "email");
    __publicField(this, "gateway");
    __publicField(this, "id");
    __publicField(this, "landing_site");
    __publicField(this, "line_items");
    __publicField(this, "location_id");
    __publicField(this, "note");
    __publicField(this, "phone");
    __publicField(this, "presentment_currency");
    __publicField(this, "referring_site");
    __publicField(this, "shipping_address");
    __publicField(this, "shipping_lines");
    __publicField(this, "sms_marketing_phone");
    __publicField(this, "source_name");
    __publicField(this, "subtotal_price");
    __publicField(this, "tax_lines");
    __publicField(this, "taxes_included");
    __publicField(this, "token");
    __publicField(this, "total_discounts");
    __publicField(this, "total_duties");
    __publicField(this, "total_line_items_price");
    __publicField(this, "total_price");
    __publicField(this, "total_tax");
    __publicField(this, "total_weight");
    __publicField(this, "updated_at");
    __publicField(this, "user_id");
  }
  static async checkouts({ session, since_id = null, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, status = null, limit = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "get",
      operation: "checkouts",
      session,
      urlIds: {},
      params: { "since_id": since_id, "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "status": status, "limit": limit, ...otherArgs },
      body: {},
      entity: null
    });
    return response ? response.body : null;
  }
};
__publicField(AbandonedCheckout, "apiVersion", ApiVersion.July24);
__publicField(AbandonedCheckout, "hasOne", {
  "currency": Currency,
  "customer": Customer
});
__publicField(AbandonedCheckout, "hasMany", {
  "discount_codes": DiscountCode
});
__publicField(AbandonedCheckout, "paths", [
  { "http_method": "get", "operation": "checkouts", "ids": [], "path": "checkouts.json" },
  { "http_method": "get", "operation": "checkouts", "ids": [], "path": "checkouts.json" }
]);
__publicField(AbandonedCheckout, "resourceNames", [
  {
    "singular": "abandoned_checkout",
    "plural": "abandoned_checkouts"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/access_scope.mjs
var AccessScope = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "handle");
    __publicField(this, "access_scopes");
  }
  static async all({ session, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: {},
      params: { ...otherArgs }
    });
    return response;
  }
};
__publicField(AccessScope, "apiVersion", ApiVersion.July24);
__publicField(AccessScope, "hasOne", {});
__publicField(AccessScope, "hasMany", {});
__publicField(AccessScope, "customPrefix", "/admin/oauth");
__publicField(AccessScope, "paths", [
  { "http_method": "get", "operation": "get", "ids": [], "path": "access_scopes.json" }
]);
__publicField(AccessScope, "resourceNames", [
  {
    "singular": "access_scope",
    "plural": "access_scopes"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/apple_pay_certificate.mjs
var ApplePayCertificate = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "id");
    __publicField(this, "merchant_id");
    __publicField(this, "status");
  }
  static async find({ session, id }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id },
      params: {}
    });
    return result.data ? result.data[0] : null;
  }
  static async delete({ session, id }) {
    const response = await this.request({
      http_method: "delete",
      operation: "delete",
      session,
      urlIds: { "id": id },
      params: {}
    });
    return response ? response.body : null;
  }
  static async csr({ session, id, ...otherArgs }) {
    const response = await this.request({
      http_method: "get",
      operation: "csr",
      session,
      urlIds: { "id": id },
      params: { ...otherArgs },
      body: {},
      entity: null
    });
    return response ? response.body : null;
  }
};
__publicField(ApplePayCertificate, "apiVersion", ApiVersion.July24);
__publicField(ApplePayCertificate, "hasOne", {});
__publicField(ApplePayCertificate, "hasMany", {});
__publicField(ApplePayCertificate, "paths", [
  { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "apple_pay_certificates/<id>.json" },
  { "http_method": "get", "operation": "csr", "ids": ["id"], "path": "apple_pay_certificates/<id>/csr.json" },
  { "http_method": "get", "operation": "get", "ids": ["id"], "path": "apple_pay_certificates/<id>.json" },
  { "http_method": "post", "operation": "post", "ids": [], "path": "apple_pay_certificates.json" },
  { "http_method": "put", "operation": "put", "ids": ["id"], "path": "apple_pay_certificates/<id>.json" }
]);
__publicField(ApplePayCertificate, "resourceNames", [
  {
    "singular": "apple_pay_certificate",
    "plural": "apple_pay_certificates"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/application_charge.mjs
var ApplicationCharge = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "confirmation_url");
    __publicField(this, "created_at");
    __publicField(this, "currency");
    __publicField(this, "id");
    __publicField(this, "name");
    __publicField(this, "price");
    __publicField(this, "return_url");
    __publicField(this, "status");
    __publicField(this, "test");
    __publicField(this, "updated_at");
  }
  static async find({ session, id, fields = null }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id },
      params: { "fields": fields }
    });
    return result.data ? result.data[0] : null;
  }
  static async all({ session, since_id = null, fields = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: {},
      params: { "since_id": since_id, "fields": fields, ...otherArgs }
    });
    return response;
  }
};
__publicField(ApplicationCharge, "apiVersion", ApiVersion.July24);
__publicField(ApplicationCharge, "hasOne", {});
__publicField(ApplicationCharge, "hasMany", {});
__publicField(ApplicationCharge, "paths", [
  { "http_method": "get", "operation": "get", "ids": [], "path": "application_charges.json" },
  { "http_method": "get", "operation": "get", "ids": ["id"], "path": "application_charges/<id>.json" },
  { "http_method": "post", "operation": "post", "ids": [], "path": "application_charges.json" }
]);
__publicField(ApplicationCharge, "resourceNames", [
  {
    "singular": "application_charge",
    "plural": "application_charges"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/application_credit.mjs
var ApplicationCredit = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "amount");
    __publicField(this, "currency");
    __publicField(this, "description");
    __publicField(this, "id");
    __publicField(this, "test");
  }
  static async find({ session, id, fields = null }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id },
      params: { "fields": fields }
    });
    return result.data ? result.data[0] : null;
  }
  static async all({ session, fields = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: {},
      params: { "fields": fields, ...otherArgs }
    });
    return response;
  }
};
__publicField(ApplicationCredit, "apiVersion", ApiVersion.July24);
__publicField(ApplicationCredit, "hasOne", {
  "currency": Currency
});
__publicField(ApplicationCredit, "hasMany", {});
__publicField(ApplicationCredit, "paths", [
  { "http_method": "get", "operation": "get", "ids": [], "path": "application_credits.json" },
  { "http_method": "get", "operation": "get", "ids": ["id"], "path": "application_credits/<id>.json" }
]);
__publicField(ApplicationCredit, "resourceNames", [
  {
    "singular": "application_credit",
    "plural": "application_credits"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/article.mjs
var Article = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "author");
    __publicField(this, "blog_id");
    __publicField(this, "body_html");
    __publicField(this, "created_at");
    __publicField(this, "handle");
    __publicField(this, "id");
    __publicField(this, "image");
    __publicField(this, "metafields");
    __publicField(this, "published");
    __publicField(this, "published_at");
    __publicField(this, "summary_html");
    __publicField(this, "tags");
    __publicField(this, "template_suffix");
    __publicField(this, "title");
    __publicField(this, "updated_at");
    __publicField(this, "user_id");
  }
  static async find({ session, id, blog_id = null, fields = null }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id, "blog_id": blog_id },
      params: { "fields": fields }
    });
    return result.data ? result.data[0] : null;
  }
  static async delete({ session, id, blog_id = null }) {
    const response = await this.request({
      http_method: "delete",
      operation: "delete",
      session,
      urlIds: { "id": id, "blog_id": blog_id },
      params: {}
    });
    return response ? response.body : null;
  }
  static async all({ session, blog_id = null, limit = null, since_id = null, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, published_at_min = null, published_at_max = null, published_status = null, handle = null, tag = null, author = null, fields = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: { "blog_id": blog_id },
      params: { "limit": limit, "since_id": since_id, "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "published_at_min": published_at_min, "published_at_max": published_at_max, "published_status": published_status, "handle": handle, "tag": tag, "author": author, "fields": fields, ...otherArgs }
    });
    return response;
  }
  static async authors({ session, ...otherArgs }) {
    const response = await this.request({
      http_method: "get",
      operation: "authors",
      session,
      urlIds: {},
      params: { ...otherArgs },
      body: {},
      entity: null
    });
    return response ? response.body : null;
  }
  static async count({ session, blog_id = null, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, published_at_min = null, published_at_max = null, published_status = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "get",
      operation: "count",
      session,
      urlIds: { "blog_id": blog_id },
      params: { "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "published_at_min": published_at_min, "published_at_max": published_at_max, "published_status": published_status, ...otherArgs },
      body: {},
      entity: null
    });
    return response ? response.body : null;
  }
  static async tags({ session, blog_id = null, limit = null, popular = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "get",
      operation: "tags",
      session,
      urlIds: { "blog_id": blog_id },
      params: { "limit": limit, "popular": popular, ...otherArgs },
      body: {},
      entity: null
    });
    return response ? response.body : null;
  }
};
__publicField(Article, "apiVersion", ApiVersion.July24);
__publicField(Article, "hasOne", {});
__publicField(Article, "hasMany", {
  "metafields": Metafield
});
__publicField(Article, "paths", [
  { "http_method": "delete", "operation": "delete", "ids": ["blog_id", "id"], "path": "blogs/<blog_id>/articles/<id>.json" },
  { "http_method": "get", "operation": "authors", "ids": [], "path": "articles/authors.json" },
  { "http_method": "get", "operation": "count", "ids": ["blog_id"], "path": "blogs/<blog_id>/articles/count.json" },
  { "http_method": "get", "operation": "get", "ids": ["blog_id"], "path": "blogs/<blog_id>/articles.json" },
  { "http_method": "get", "operation": "get", "ids": ["blog_id", "id"], "path": "blogs/<blog_id>/articles/<id>.json" },
  { "http_method": "get", "operation": "tags", "ids": [], "path": "articles/tags.json" },
  { "http_method": "get", "operation": "tags", "ids": ["blog_id"], "path": "blogs/<blog_id>/articles/tags.json" },
  { "http_method": "post", "operation": "post", "ids": ["blog_id"], "path": "blogs/<blog_id>/articles.json" },
  { "http_method": "put", "operation": "put", "ids": ["blog_id", "id"], "path": "blogs/<blog_id>/articles/<id>.json" }
]);
__publicField(Article, "resourceNames", [
  {
    "singular": "article",
    "plural": "articles"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/asset.mjs
var Asset = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "attachment");
    __publicField(this, "checksum");
    __publicField(this, "content_type");
    __publicField(this, "created_at");
    __publicField(this, "key");
    __publicField(this, "public_url");
    __publicField(this, "size");
    __publicField(this, "theme_id");
    __publicField(this, "updated_at");
    __publicField(this, "value");
  }
  static async delete({ session, theme_id = null, asset = null }) {
    const response = await this.request({
      http_method: "delete",
      operation: "delete",
      session,
      urlIds: { "theme_id": theme_id },
      params: { "asset": asset }
    });
    return response ? response.body : null;
  }
  static async all({ session, theme_id = null, fields = null, asset = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: { "theme_id": theme_id },
      params: { "fields": fields, "asset": asset, ...otherArgs }
    });
    return response;
  }
};
__publicField(Asset, "apiVersion", ApiVersion.July24);
__publicField(Asset, "hasOne", {});
__publicField(Asset, "hasMany", {});
__publicField(Asset, "paths", [
  { "http_method": "delete", "operation": "delete", "ids": ["theme_id"], "path": "themes/<theme_id>/assets.json" },
  { "http_method": "get", "operation": "get", "ids": ["theme_id"], "path": "themes/<theme_id>/assets.json" },
  { "http_method": "get", "operation": "get", "ids": ["theme_id"], "path": "themes/<theme_id>/assets.json" },
  { "http_method": "put", "operation": "put", "ids": ["theme_id"], "path": "themes/<theme_id>/assets.json" }
]);
__publicField(Asset, "primaryKey", "key");
__publicField(Asset, "resourceNames", [
  {
    "singular": "asset",
    "plural": "assets"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/assigned_fulfillment_order.mjs
var AssignedFulfillmentOrder = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "assigned_location_id");
    __publicField(this, "destination");
    __publicField(this, "id");
    __publicField(this, "line_items");
    __publicField(this, "order_id");
    __publicField(this, "request_status");
    __publicField(this, "shop_id");
    __publicField(this, "status");
  }
  static async all({ session, assignment_status = null, location_ids = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: {},
      params: { "assignment_status": assignment_status, "location_ids": location_ids, ...otherArgs }
    });
    return response;
  }
};
__publicField(AssignedFulfillmentOrder, "apiVersion", ApiVersion.July24);
__publicField(AssignedFulfillmentOrder, "hasOne", {});
__publicField(AssignedFulfillmentOrder, "hasMany", {});
__publicField(AssignedFulfillmentOrder, "paths", [
  { "http_method": "get", "operation": "get", "ids": [], "path": "assigned_fulfillment_orders.json" }
]);
__publicField(AssignedFulfillmentOrder, "resourceNames", [
  {
    "singular": "fulfillment_order",
    "plural": "fulfillment_orders"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/balance.mjs
var Balance = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "balance");
  }
  static async all({ session, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: {},
      params: { ...otherArgs }
    });
    return response;
  }
};
__publicField(Balance, "apiVersion", ApiVersion.July24);
__publicField(Balance, "hasOne", {});
__publicField(Balance, "hasMany", {});
__publicField(Balance, "paths", [
  { "http_method": "get", "operation": "get", "ids": [], "path": "shopify_payments/balance.json" }
]);
__publicField(Balance, "resourceNames", [
  {
    "singular": "balance",
    "plural": "balances"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/blog.mjs
var Blog = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "admin_graphql_api_id");
    __publicField(this, "commentable");
    __publicField(this, "created_at");
    __publicField(this, "feedburner");
    __publicField(this, "feedburner_location");
    __publicField(this, "handle");
    __publicField(this, "id");
    __publicField(this, "metafields");
    __publicField(this, "tags");
    __publicField(this, "template_suffix");
    __publicField(this, "title");
    __publicField(this, "updated_at");
  }
  static async find({ session, id, fields = null }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id },
      params: { "fields": fields }
    });
    return result.data ? result.data[0] : null;
  }
  static async delete({ session, id }) {
    const response = await this.request({
      http_method: "delete",
      operation: "delete",
      session,
      urlIds: { "id": id },
      params: {}
    });
    return response ? response.body : null;
  }
  static async all({ session, limit = null, since_id = null, handle = null, fields = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: {},
      params: { "limit": limit, "since_id": since_id, "handle": handle, "fields": fields, ...otherArgs }
    });
    return response;
  }
  static async count({ session, ...otherArgs }) {
    const response = await this.request({
      http_method: "get",
      operation: "count",
      session,
      urlIds: {},
      params: { ...otherArgs },
      body: {},
      entity: null
    });
    return response ? response.body : null;
  }
};
__publicField(Blog, "apiVersion", ApiVersion.July24);
__publicField(Blog, "hasOne", {});
__publicField(Blog, "hasMany", {
  "metafields": Metafield
});
__publicField(Blog, "paths", [
  { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "blogs/<id>.json" },
  { "http_method": "get", "operation": "count", "ids": [], "path": "blogs/count.json" },
  { "http_method": "get", "operation": "get", "ids": [], "path": "blogs.json" },
  { "http_method": "get", "operation": "get", "ids": ["id"], "path": "blogs/<id>.json" },
  { "http_method": "post", "operation": "post", "ids": [], "path": "blogs.json" },
  { "http_method": "put", "operation": "put", "ids": ["id"], "path": "blogs/<id>.json" }
]);
__publicField(Blog, "resourceNames", [
  {
    "singular": "blog",
    "plural": "blogs"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/cancellation_request.mjs
var CancellationRequest = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "fulfillment_order_id");
  }
  async accept({ message = null, body = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "post",
      operation: "accept",
      session: this.session,
      urlIds: { "fulfillment_order_id": this.fulfillment_order_id },
      params: { "message": message, ...otherArgs },
      body,
      entity: this
    });
    return response ? response.body : null;
  }
  async reject({ message = null, body = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "post",
      operation: "reject",
      session: this.session,
      urlIds: { "fulfillment_order_id": this.fulfillment_order_id },
      params: { "message": message, ...otherArgs },
      body,
      entity: this
    });
    return response ? response.body : null;
  }
};
__publicField(CancellationRequest, "apiVersion", ApiVersion.July24);
__publicField(CancellationRequest, "hasOne", {});
__publicField(CancellationRequest, "hasMany", {});
__publicField(CancellationRequest, "paths", [
  { "http_method": "post", "operation": "accept", "ids": ["fulfillment_order_id"], "path": "fulfillment_orders/<fulfillment_order_id>/cancellation_request/accept.json" },
  { "http_method": "post", "operation": "post", "ids": ["fulfillment_order_id"], "path": "fulfillment_orders/<fulfillment_order_id>/cancellation_request.json" },
  { "http_method": "post", "operation": "reject", "ids": ["fulfillment_order_id"], "path": "fulfillment_orders/<fulfillment_order_id>/cancellation_request/reject.json" }
]);
__publicField(CancellationRequest, "resourceNames", [
  {
    "singular": "cancellation_request",
    "plural": "cancellation_requests"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/carrier_service.mjs
var CarrierService = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "active");
    __publicField(this, "admin_graphql_api_id");
    __publicField(this, "callback_url");
    __publicField(this, "carrier_service_type");
    __publicField(this, "format");
    __publicField(this, "id");
    __publicField(this, "name");
    __publicField(this, "service_discovery");
  }
  static async find({ session, id }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id },
      params: {}
    });
    return result.data ? result.data[0] : null;
  }
  static async delete({ session, id }) {
    const response = await this.request({
      http_method: "delete",
      operation: "delete",
      session,
      urlIds: { "id": id },
      params: {}
    });
    return response ? response.body : null;
  }
  static async all({ session, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: {},
      params: { ...otherArgs }
    });
    return response;
  }
};
__publicField(CarrierService, "apiVersion", ApiVersion.July24);
__publicField(CarrierService, "hasOne", {});
__publicField(CarrierService, "hasMany", {});
__publicField(CarrierService, "paths", [
  { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "carrier_services/<id>.json" },
  { "http_method": "get", "operation": "get", "ids": [], "path": "carrier_services.json" },
  { "http_method": "get", "operation": "get", "ids": ["id"], "path": "carrier_services/<id>.json" },
  { "http_method": "post", "operation": "post", "ids": [], "path": "carrier_services.json" },
  { "http_method": "put", "operation": "put", "ids": ["id"], "path": "carrier_services/<id>.json" }
]);
__publicField(CarrierService, "resourceNames", [
  {
    "singular": "carrier_service",
    "plural": "carrier_services"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/fulfillment.mjs
var Fulfillment = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "created_at");
    __publicField(this, "id");
    __publicField(this, "line_items");
    __publicField(this, "location_id");
    __publicField(this, "name");
    __publicField(this, "notify_customer");
    __publicField(this, "order_id");
    __publicField(this, "origin_address");
    __publicField(this, "receipt");
    __publicField(this, "service");
    __publicField(this, "shipment_status");
    __publicField(this, "status");
    __publicField(this, "tracking_company");
    __publicField(this, "tracking_number");
    __publicField(this, "tracking_numbers");
    __publicField(this, "tracking_url");
    __publicField(this, "tracking_urls");
    __publicField(this, "updated_at");
    __publicField(this, "variant_inventory_management");
  }
  static async find({ session, id, order_id = null, fields = null }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id, "order_id": order_id },
      params: { "fields": fields }
    });
    return result.data ? result.data[0] : null;
  }
  static async all({ session, fulfillment_order_id = null, order_id = null, created_at_max = null, created_at_min = null, fields = null, limit = null, since_id = null, updated_at_max = null, updated_at_min = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: { "fulfillment_order_id": fulfillment_order_id, "order_id": order_id },
      params: { "created_at_max": created_at_max, "created_at_min": created_at_min, "fields": fields, "limit": limit, "since_id": since_id, "updated_at_max": updated_at_max, "updated_at_min": updated_at_min, ...otherArgs }
    });
    return response;
  }
  static async count({ session, order_id = null, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "get",
      operation: "count",
      session,
      urlIds: { "order_id": order_id },
      params: { "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, ...otherArgs },
      body: {},
      entity: null
    });
    return response ? response.body : null;
  }
  async cancel({ body = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "post",
      operation: "cancel",
      session: this.session,
      urlIds: { "id": this.id },
      params: { ...otherArgs },
      body,
      entity: this
    });
    return response ? response.body : null;
  }
  async update_tracking({ notify_customer = null, tracking_info = null, body = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "post",
      operation: "update_tracking",
      session: this.session,
      urlIds: { "id": this.id },
      params: { "notify_customer": notify_customer, "tracking_info": tracking_info, ...otherArgs },
      body,
      entity: this
    });
    return response ? response.body : null;
  }
};
__publicField(Fulfillment, "apiVersion", ApiVersion.July24);
__publicField(Fulfillment, "hasOne", {});
__publicField(Fulfillment, "hasMany", {});
__publicField(Fulfillment, "paths", [
  { "http_method": "get", "operation": "count", "ids": ["order_id"], "path": "orders/<order_id>/fulfillments/count.json" },
  { "http_method": "get", "operation": "get", "ids": ["fulfillment_order_id"], "path": "fulfillment_orders/<fulfillment_order_id>/fulfillments.json" },
  { "http_method": "get", "operation": "get", "ids": ["order_id"], "path": "orders/<order_id>/fulfillments.json" },
  { "http_method": "get", "operation": "get", "ids": ["order_id", "id"], "path": "orders/<order_id>/fulfillments/<id>.json" },
  { "http_method": "post", "operation": "cancel", "ids": ["id"], "path": "fulfillments/<id>/cancel.json" },
  { "http_method": "post", "operation": "post", "ids": [], "path": "fulfillments.json" },
  { "http_method": "post", "operation": "update_tracking", "ids": ["id"], "path": "fulfillments/<id>/update_tracking.json" }
]);
__publicField(Fulfillment, "resourceNames", [
  {
    "singular": "fulfillment",
    "plural": "fulfillments"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/transaction.mjs
var Transaction = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "kind");
    __publicField(this, "amount");
    __publicField(this, "authorization");
    __publicField(this, "authorization_expires_at");
    __publicField(this, "created_at");
    __publicField(this, "currency");
    __publicField(this, "currency_exchange_adjustment");
    __publicField(this, "device_id");
    __publicField(this, "error_code");
    __publicField(this, "extended_authorization_attributes");
    __publicField(this, "gateway");
    __publicField(this, "id");
    __publicField(this, "location_id");
    __publicField(this, "message");
    __publicField(this, "order_id");
    __publicField(this, "parent_id");
    __publicField(this, "payment_details");
    __publicField(this, "payments_refund_attributes");
    __publicField(this, "processed_at");
    __publicField(this, "receipt");
    __publicField(this, "source_name");
    __publicField(this, "status");
    __publicField(this, "test");
    __publicField(this, "total_unsettled_set");
    __publicField(this, "user_id");
  }
  static async find({ session, id, order_id = null, fields = null, in_shop_currency = null }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id, "order_id": order_id },
      params: { "fields": fields, "in_shop_currency": in_shop_currency }
    });
    return result.data ? result.data[0] : null;
  }
  static async all({ session, order_id = null, since_id = null, fields = null, in_shop_currency = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: { "order_id": order_id },
      params: { "since_id": since_id, "fields": fields, "in_shop_currency": in_shop_currency, ...otherArgs }
    });
    return response;
  }
  static async count({ session, order_id = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "get",
      operation: "count",
      session,
      urlIds: { "order_id": order_id },
      params: { ...otherArgs },
      body: {},
      entity: null
    });
    return response ? response.body : null;
  }
};
__publicField(Transaction, "apiVersion", ApiVersion.July24);
__publicField(Transaction, "hasOne", {});
__publicField(Transaction, "hasMany", {});
__publicField(Transaction, "paths", [
  { "http_method": "get", "operation": "count", "ids": ["order_id"], "path": "orders/<order_id>/transactions/count.json" },
  { "http_method": "get", "operation": "get", "ids": ["order_id"], "path": "orders/<order_id>/transactions.json" },
  { "http_method": "get", "operation": "get", "ids": ["order_id", "id"], "path": "orders/<order_id>/transactions/<id>.json" },
  { "http_method": "post", "operation": "post", "ids": ["order_id"], "path": "orders/<order_id>/transactions.json" }
]);
__publicField(Transaction, "resourceNames", [
  {
    "singular": "transaction",
    "plural": "transactions"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/refund.mjs
var Refund = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "created_at");
    __publicField(this, "duties");
    __publicField(this, "id");
    __publicField(this, "note");
    __publicField(this, "order_adjustments");
    __publicField(this, "order_id");
    __publicField(this, "processed_at");
    __publicField(this, "refund_duties");
    __publicField(this, "refund_line_items");
    __publicField(this, "restock");
    __publicField(this, "transactions");
    __publicField(this, "user_id");
  }
  static async find({ session, id, order_id = null, fields = null, in_shop_currency = null }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id, "order_id": order_id },
      params: { "fields": fields, "in_shop_currency": in_shop_currency }
    });
    return result.data ? result.data[0] : null;
  }
  static async all({ session, order_id = null, limit = null, fields = null, in_shop_currency = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: { "order_id": order_id },
      params: { "limit": limit, "fields": fields, "in_shop_currency": in_shop_currency, ...otherArgs }
    });
    return response;
  }
  async calculate({ shipping = null, refund_line_items = null, currency = null, body = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "post",
      operation: "calculate",
      session: this.session,
      urlIds: { "order_id": this.order_id },
      params: { "shipping": shipping, "refund_line_items": refund_line_items, "currency": currency, ...otherArgs },
      body,
      entity: this
    });
    return response ? response.body : null;
  }
};
__publicField(Refund, "apiVersion", ApiVersion.July24);
__publicField(Refund, "hasOne", {});
__publicField(Refund, "hasMany", {
  "transactions": Transaction
});
__publicField(Refund, "paths", [
  { "http_method": "get", "operation": "get", "ids": ["order_id"], "path": "orders/<order_id>/refunds.json" },
  { "http_method": "get", "operation": "get", "ids": ["order_id", "id"], "path": "orders/<order_id>/refunds/<id>.json" },
  { "http_method": "post", "operation": "calculate", "ids": ["order_id"], "path": "orders/<order_id>/refunds/calculate.json" },
  { "http_method": "post", "operation": "post", "ids": ["order_id"], "path": "orders/<order_id>/refunds.json" }
]);
__publicField(Refund, "resourceNames", [
  {
    "singular": "refund",
    "plural": "refunds"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/order.mjs
var Order = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "line_items");
    __publicField(this, "app_id");
    __publicField(this, "billing_address");
    __publicField(this, "browser_ip");
    __publicField(this, "buyer_accepts_marketing");
    __publicField(this, "cancel_reason");
    __publicField(this, "cancelled_at");
    __publicField(this, "cart_token");
    __publicField(this, "checkout_token");
    __publicField(this, "client_details");
    __publicField(this, "closed_at");
    __publicField(this, "company");
    __publicField(this, "confirmation_number");
    __publicField(this, "created_at");
    __publicField(this, "currency");
    __publicField(this, "current_subtotal_price");
    __publicField(this, "current_subtotal_price_set");
    __publicField(this, "current_total_additional_fees_set");
    __publicField(this, "current_total_discounts");
    __publicField(this, "current_total_discounts_set");
    __publicField(this, "current_total_duties_set");
    __publicField(this, "current_total_price");
    __publicField(this, "current_total_price_set");
    __publicField(this, "current_total_tax");
    __publicField(this, "current_total_tax_set");
    __publicField(this, "customer");
    __publicField(this, "customer_locale");
    __publicField(this, "discount_applications");
    __publicField(this, "discount_codes");
    __publicField(this, "email");
    __publicField(this, "estimated_taxes");
    __publicField(this, "financial_status");
    __publicField(this, "fulfillment_status");
    __publicField(this, "fulfillments");
    __publicField(this, "gateway");
    __publicField(this, "id");
    __publicField(this, "landing_site");
    __publicField(this, "location_id");
    __publicField(this, "merchant_of_record_app_id");
    __publicField(this, "name");
    __publicField(this, "note");
    __publicField(this, "note_attributes");
    __publicField(this, "number");
    __publicField(this, "order_number");
    __publicField(this, "order_status_url");
    __publicField(this, "original_total_additional_fees_set");
    __publicField(this, "original_total_duties_set");
    __publicField(this, "payment_gateway_names");
    __publicField(this, "payment_terms");
    __publicField(this, "phone");
    __publicField(this, "po_number");
    __publicField(this, "presentment_currency");
    __publicField(this, "processed_at");
    __publicField(this, "referring_site");
    __publicField(this, "refunds");
    __publicField(this, "shipping_address");
    __publicField(this, "shipping_lines");
    __publicField(this, "source_identifier");
    __publicField(this, "source_name");
    __publicField(this, "source_url");
    __publicField(this, "subtotal_price");
    __publicField(this, "subtotal_price_set");
    __publicField(this, "tags");
    __publicField(this, "tax_lines");
    __publicField(this, "taxes_included");
    __publicField(this, "test");
    __publicField(this, "token");
    __publicField(this, "total_discounts");
    __publicField(this, "total_discounts_set");
    __publicField(this, "total_line_items_price");
    __publicField(this, "total_line_items_price_set");
    __publicField(this, "total_outstanding");
    __publicField(this, "total_price");
    __publicField(this, "total_price_set");
    __publicField(this, "total_shipping_price_set");
    __publicField(this, "total_tax");
    __publicField(this, "total_tax_set");
    __publicField(this, "total_tip_received");
    __publicField(this, "total_weight");
    __publicField(this, "updated_at");
    __publicField(this, "user_id");
  }
  static async find({ session, id, fields = null }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id },
      params: { "fields": fields }
    });
    return result.data ? result.data[0] : null;
  }
  static async delete({ session, id }) {
    const response = await this.request({
      http_method: "delete",
      operation: "delete",
      session,
      urlIds: { "id": id },
      params: {}
    });
    return response ? response.body : null;
  }
  static async all({ session, ids = null, limit = null, since_id = null, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, processed_at_min = null, processed_at_max = null, attribution_app_id = null, status = null, financial_status = null, fulfillment_status = null, fields = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: {},
      params: { "ids": ids, "limit": limit, "since_id": since_id, "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "processed_at_min": processed_at_min, "processed_at_max": processed_at_max, "attribution_app_id": attribution_app_id, "status": status, "financial_status": financial_status, "fulfillment_status": fulfillment_status, "fields": fields, ...otherArgs }
    });
    return response;
  }
  static async count({ session, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, status = null, financial_status = null, fulfillment_status = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "get",
      operation: "count",
      session,
      urlIds: {},
      params: { "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "status": status, "financial_status": financial_status, "fulfillment_status": fulfillment_status, ...otherArgs },
      body: {},
      entity: null
    });
    return response ? response.body : null;
  }
  async cancel({ amount = null, currency = null, restock = null, reason = null, email = null, refund = null, body = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "post",
      operation: "cancel",
      session: this.session,
      urlIds: { "id": this.id },
      params: { "amount": amount, "currency": currency, "restock": restock, "reason": reason, "email": email, "refund": refund, ...otherArgs },
      body,
      entity: this
    });
    return response ? response.body : null;
  }
  async close({ body = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "post",
      operation: "close",
      session: this.session,
      urlIds: { "id": this.id },
      params: { ...otherArgs },
      body,
      entity: this
    });
    return response ? response.body : null;
  }
  async open({ body = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "post",
      operation: "open",
      session: this.session,
      urlIds: { "id": this.id },
      params: { ...otherArgs },
      body,
      entity: this
    });
    return response ? response.body : null;
  }
};
__publicField(Order, "apiVersion", ApiVersion.July24);
__publicField(Order, "hasOne", {
  "customer": Customer
});
__publicField(Order, "hasMany", {
  "discount_codes": DiscountCode,
  "fulfillments": Fulfillment,
  "refunds": Refund
});
__publicField(Order, "paths", [
  { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "orders/<id>.json" },
  { "http_method": "get", "operation": "count", "ids": [], "path": "orders/count.json" },
  { "http_method": "get", "operation": "get", "ids": [], "path": "orders.json" },
  { "http_method": "get", "operation": "get", "ids": ["id"], "path": "orders/<id>.json" },
  { "http_method": "post", "operation": "cancel", "ids": ["id"], "path": "orders/<id>/cancel.json" },
  { "http_method": "post", "operation": "close", "ids": ["id"], "path": "orders/<id>/close.json" },
  { "http_method": "post", "operation": "open", "ids": ["id"], "path": "orders/<id>/open.json" },
  { "http_method": "post", "operation": "post", "ids": [], "path": "orders.json" },
  { "http_method": "put", "operation": "put", "ids": ["id"], "path": "orders/<id>.json" }
]);
__publicField(Order, "resourceNames", [
  {
    "singular": "order",
    "plural": "orders"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/gift_card.mjs
var GiftCard = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "api_client_id");
    __publicField(this, "balance");
    __publicField(this, "code");
    __publicField(this, "created_at");
    __publicField(this, "currency");
    __publicField(this, "customer_id");
    __publicField(this, "disabled_at");
    __publicField(this, "expires_on");
    __publicField(this, "id");
    __publicField(this, "initial_value");
    __publicField(this, "last_characters");
    __publicField(this, "line_item_id");
    __publicField(this, "note");
    __publicField(this, "order_id");
    __publicField(this, "template_suffix");
    __publicField(this, "updated_at");
    __publicField(this, "user_id");
  }
  static async find({ session, id }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id },
      params: {}
    });
    return result.data ? result.data[0] : null;
  }
  static async all({ session, status = null, limit = null, since_id = null, fields = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: {},
      params: { "status": status, "limit": limit, "since_id": since_id, "fields": fields, ...otherArgs }
    });
    return response;
  }
  static async count({ session, status = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "get",
      operation: "count",
      session,
      urlIds: {},
      params: { "status": status, ...otherArgs },
      body: {},
      entity: null
    });
    return response ? response.body : null;
  }
  static async search({ session, order = null, query = null, limit = null, fields = null, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, returnFullResponse = false, ...otherArgs }) {
    const response = await this.request({
      http_method: "get",
      operation: "search",
      session,
      urlIds: {},
      params: { "order": order, "query": query, "limit": limit, "fields": fields, "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, ...otherArgs },
      body: {},
      entity: null
    });
    return returnFullResponse ? response : response == null ? void 0 : response.body;
  }
  async disable({ body = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "post",
      operation: "disable",
      session: this.session,
      urlIds: { "id": this.id },
      params: { ...otherArgs },
      body,
      entity: this
    });
    return response ? response.body : null;
  }
};
__publicField(GiftCard, "apiVersion", ApiVersion.July24);
__publicField(GiftCard, "hasOne", {});
__publicField(GiftCard, "hasMany", {});
__publicField(GiftCard, "paths", [
  { "http_method": "get", "operation": "count", "ids": [], "path": "gift_cards/count.json" },
  { "http_method": "get", "operation": "get", "ids": [], "path": "gift_cards.json" },
  { "http_method": "get", "operation": "get", "ids": ["id"], "path": "gift_cards/<id>.json" },
  { "http_method": "get", "operation": "search", "ids": [], "path": "gift_cards/search.json" },
  { "http_method": "post", "operation": "disable", "ids": ["id"], "path": "gift_cards/<id>/disable.json" },
  { "http_method": "post", "operation": "post", "ids": [], "path": "gift_cards.json" },
  { "http_method": "put", "operation": "put", "ids": ["id"], "path": "gift_cards/<id>.json" }
]);
__publicField(GiftCard, "resourceNames", [
  {
    "singular": "gift_card",
    "plural": "gift_cards"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/checkout.mjs
var Checkout = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "billing_address");
    __publicField(this, "line_items");
    __publicField(this, "applied_discount");
    __publicField(this, "buyer_accepts_marketing");
    __publicField(this, "created_at");
    __publicField(this, "currency");
    __publicField(this, "customer_id");
    __publicField(this, "discount_code");
    __publicField(this, "email");
    __publicField(this, "gift_cards");
    __publicField(this, "order");
    __publicField(this, "payment_due");
    __publicField(this, "payment_url");
    __publicField(this, "phone");
    __publicField(this, "presentment_currency");
    __publicField(this, "requires_shipping");
    __publicField(this, "reservation_time");
    __publicField(this, "reservation_time_left");
    __publicField(this, "shipping_address");
    __publicField(this, "shipping_line");
    __publicField(this, "shipping_rate");
    __publicField(this, "source_identifier");
    __publicField(this, "source_name");
    __publicField(this, "source_url");
    __publicField(this, "subtotal_price");
    __publicField(this, "tax_lines");
    __publicField(this, "taxes_included");
    __publicField(this, "token");
    __publicField(this, "total_price");
    __publicField(this, "total_tax");
    __publicField(this, "updated_at");
    __publicField(this, "user_id");
    __publicField(this, "web_url");
  }
  static async find({ session, token }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "token": token },
      params: {}
    });
    return result.data ? result.data[0] : null;
  }
  static async shipping_rates({ session, token, ...otherArgs }) {
    const response = await this.request({
      http_method: "get",
      operation: "shipping_rates",
      session,
      urlIds: { "token": token },
      params: { ...otherArgs },
      body: {},
      entity: null
    });
    return response ? response.body : null;
  }
  async complete({ body = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "post",
      operation: "complete",
      session: this.session,
      urlIds: { "token": this.token },
      params: { ...otherArgs },
      body,
      entity: this
    });
    return response ? response.body : null;
  }
};
__publicField(Checkout, "apiVersion", ApiVersion.July24);
__publicField(Checkout, "hasOne", {
  "discount_code": DiscountCode,
  "order": Order
});
__publicField(Checkout, "hasMany", {
  "gift_cards": GiftCard
});
__publicField(Checkout, "paths", [
  { "http_method": "get", "operation": "get", "ids": ["token"], "path": "checkouts/<token>.json" },
  { "http_method": "get", "operation": "shipping_rates", "ids": ["token"], "path": "checkouts/<token>/shipping_rates.json" },
  { "http_method": "post", "operation": "complete", "ids": ["token"], "path": "checkouts/<token>/complete.json" },
  { "http_method": "post", "operation": "post", "ids": [], "path": "checkouts.json" },
  { "http_method": "put", "operation": "put", "ids": ["token"], "path": "checkouts/<token>.json" }
]);
__publicField(Checkout, "primaryKey", "token");
__publicField(Checkout, "resourceNames", [
  {
    "singular": "checkout",
    "plural": "checkouts"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/collect.mjs
var Collect = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "collection_id");
    __publicField(this, "created_at");
    __publicField(this, "id");
    __publicField(this, "position");
    __publicField(this, "product_id");
    __publicField(this, "sort_value");
    __publicField(this, "updated_at");
  }
  static async find({ session, id, fields = null }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id },
      params: { "fields": fields }
    });
    return result.data ? result.data[0] : null;
  }
  static async delete({ session, id }) {
    const response = await this.request({
      http_method: "delete",
      operation: "delete",
      session,
      urlIds: { "id": id },
      params: {}
    });
    return response ? response.body : null;
  }
  static async all({ session, limit = null, since_id = null, fields = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: {},
      params: { "limit": limit, "since_id": since_id, "fields": fields, ...otherArgs }
    });
    return response;
  }
  static async count({ session, ...otherArgs }) {
    const response = await this.request({
      http_method: "get",
      operation: "count",
      session,
      urlIds: {},
      params: { ...otherArgs },
      body: {},
      entity: null
    });
    return response ? response.body : null;
  }
};
__publicField(Collect, "apiVersion", ApiVersion.July24);
__publicField(Collect, "hasOne", {});
__publicField(Collect, "hasMany", {});
__publicField(Collect, "paths", [
  { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "collects/<id>.json" },
  { "http_method": "get", "operation": "count", "ids": [], "path": "collects/count.json" },
  { "http_method": "get", "operation": "get", "ids": [], "path": "collects.json" },
  { "http_method": "get", "operation": "get", "ids": ["id"], "path": "collects/<id>.json" },
  { "http_method": "post", "operation": "post", "ids": [], "path": "collects.json" }
]);
__publicField(Collect, "resourceNames", [
  {
    "singular": "collect",
    "plural": "collects"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/image.mjs
var Image = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "created_at");
    __publicField(this, "height");
    __publicField(this, "id");
    __publicField(this, "position");
    __publicField(this, "product_id");
    __publicField(this, "src");
    __publicField(this, "updated_at");
    __publicField(this, "variant_ids");
    __publicField(this, "width");
  }
  static async find({ session, id, product_id = null, fields = null }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id, "product_id": product_id },
      params: { "fields": fields }
    });
    return result.data ? result.data[0] : null;
  }
  static async delete({ session, id, product_id = null }) {
    const response = await this.request({
      http_method: "delete",
      operation: "delete",
      session,
      urlIds: { "id": id, "product_id": product_id },
      params: {}
    });
    return response ? response.body : null;
  }
  static async all({ session, product_id = null, since_id = null, fields = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: { "product_id": product_id },
      params: { "since_id": since_id, "fields": fields, ...otherArgs }
    });
    return response;
  }
  static async count({ session, product_id = null, since_id = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "get",
      operation: "count",
      session,
      urlIds: { "product_id": product_id },
      params: { "since_id": since_id, ...otherArgs },
      body: {},
      entity: null
    });
    return response ? response.body : null;
  }
};
__publicField(Image, "apiVersion", ApiVersion.July24);
__publicField(Image, "hasOne", {});
__publicField(Image, "hasMany", {});
__publicField(Image, "paths", [
  { "http_method": "delete", "operation": "delete", "ids": ["product_id", "id"], "path": "products/<product_id>/images/<id>.json" },
  { "http_method": "get", "operation": "count", "ids": ["product_id"], "path": "products/<product_id>/images/count.json" },
  { "http_method": "get", "operation": "get", "ids": ["product_id"], "path": "products/<product_id>/images.json" },
  { "http_method": "get", "operation": "get", "ids": ["product_id", "id"], "path": "products/<product_id>/images/<id>.json" },
  { "http_method": "post", "operation": "post", "ids": ["product_id"], "path": "products/<product_id>/images.json" },
  { "http_method": "put", "operation": "put", "ids": ["product_id", "id"], "path": "products/<product_id>/images/<id>.json" }
]);
__publicField(Image, "resourceNames", [
  {
    "singular": "image",
    "plural": "images"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/collection.mjs
var Collection = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "title");
    __publicField(this, "body_html");
    __publicField(this, "handle");
    __publicField(this, "id");
    __publicField(this, "image");
    __publicField(this, "published_at");
    __publicField(this, "published_scope");
    __publicField(this, "sort_order");
    __publicField(this, "template_suffix");
    __publicField(this, "updated_at");
  }
  static async find({ session, id, fields = null }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id },
      params: { "fields": fields }
    });
    return result.data ? result.data[0] : null;
  }
  static async products({ session, id, limit = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "get",
      operation: "products",
      session,
      urlIds: { "id": id },
      params: { "limit": limit, ...otherArgs },
      body: {},
      entity: null
    });
    return response ? response.body : null;
  }
};
__publicField(Collection, "apiVersion", ApiVersion.July24);
__publicField(Collection, "hasOne", {
  "image": Image
});
__publicField(Collection, "hasMany", {});
__publicField(Collection, "paths", [
  { "http_method": "get", "operation": "get", "ids": ["id"], "path": "collections/<id>.json" },
  { "http_method": "get", "operation": "products", "ids": ["id"], "path": "collections/<id>/products.json" }
]);
__publicField(Collection, "resourceNames", [
  {
    "singular": "collection",
    "plural": "collections"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/collection_listing.mjs
var CollectionListing = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "body_html");
    __publicField(this, "collection_id");
    __publicField(this, "default_product_image");
    __publicField(this, "handle");
    __publicField(this, "image");
    __publicField(this, "published_at");
    __publicField(this, "sort_order");
    __publicField(this, "title");
    __publicField(this, "updated_at");
  }
  static async find({ session, collection_id }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "collection_id": collection_id },
      params: {}
    });
    return result.data ? result.data[0] : null;
  }
  static async delete({ session, collection_id }) {
    const response = await this.request({
      http_method: "delete",
      operation: "delete",
      session,
      urlIds: { "collection_id": collection_id },
      params: {}
    });
    return response ? response.body : null;
  }
  static async all({ session, limit = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: {},
      params: { "limit": limit, ...otherArgs }
    });
    return response;
  }
  static async product_ids({ session, collection_id, limit = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "get",
      operation: "product_ids",
      session,
      urlIds: { "collection_id": collection_id },
      params: { "limit": limit, ...otherArgs },
      body: {},
      entity: null
    });
    return response ? response.body : null;
  }
};
__publicField(CollectionListing, "apiVersion", ApiVersion.July24);
__publicField(CollectionListing, "hasOne", {
  "image": Image
});
__publicField(CollectionListing, "hasMany", {});
__publicField(CollectionListing, "paths", [
  { "http_method": "delete", "operation": "delete", "ids": ["collection_id"], "path": "collection_listings/<collection_id>.json" },
  { "http_method": "get", "operation": "get", "ids": [], "path": "collection_listings.json" },
  { "http_method": "get", "operation": "get", "ids": ["collection_id"], "path": "collection_listings/<collection_id>.json" },
  { "http_method": "get", "operation": "product_ids", "ids": ["collection_id"], "path": "collection_listings/<collection_id>/product_ids.json" },
  { "http_method": "put", "operation": "put", "ids": ["collection_id"], "path": "collection_listings/<collection_id>.json" }
]);
__publicField(CollectionListing, "primaryKey", "collection_id");
__publicField(CollectionListing, "resourceNames", [
  {
    "singular": "collection_listing",
    "plural": "collection_listings"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/comment.mjs
var Comment = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "article_id");
    __publicField(this, "author");
    __publicField(this, "blog_id");
    __publicField(this, "body");
    __publicField(this, "body_html");
    __publicField(this, "created_at");
    __publicField(this, "email");
    __publicField(this, "id");
    __publicField(this, "ip");
    __publicField(this, "published_at");
    __publicField(this, "status");
    __publicField(this, "updated_at");
    __publicField(this, "user_agent");
  }
  static async find({ session, id, fields = null }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id },
      params: { "fields": fields }
    });
    return result.data ? result.data[0] : null;
  }
  static async all({ session, limit = null, since_id = null, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, published_at_min = null, published_at_max = null, fields = null, published_status = null, status = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: {},
      params: { "limit": limit, "since_id": since_id, "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "published_at_min": published_at_min, "published_at_max": published_at_max, "fields": fields, "published_status": published_status, "status": status, ...otherArgs }
    });
    return response;
  }
  static async count({ session, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, published_at_min = null, published_at_max = null, published_status = null, status = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "get",
      operation: "count",
      session,
      urlIds: {},
      params: { "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "published_at_min": published_at_min, "published_at_max": published_at_max, "published_status": published_status, "status": status, ...otherArgs },
      body: {},
      entity: null
    });
    return response ? response.body : null;
  }
  async approve({ body = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "post",
      operation: "approve",
      session: this.session,
      urlIds: { "id": this.id },
      params: { ...otherArgs },
      body,
      entity: this
    });
    return response ? response.body : null;
  }
  async not_spam({ body = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "post",
      operation: "not_spam",
      session: this.session,
      urlIds: { "id": this.id },
      params: { ...otherArgs },
      body,
      entity: this
    });
    return response ? response.body : null;
  }
  async remove({ body = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "post",
      operation: "remove",
      session: this.session,
      urlIds: { "id": this.id },
      params: { ...otherArgs },
      body,
      entity: this
    });
    return response ? response.body : null;
  }
  async restore({ body = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "post",
      operation: "restore",
      session: this.session,
      urlIds: { "id": this.id },
      params: { ...otherArgs },
      body,
      entity: this
    });
    return response ? response.body : null;
  }
  async spam({ body = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "post",
      operation: "spam",
      session: this.session,
      urlIds: { "id": this.id },
      params: { ...otherArgs },
      body,
      entity: this
    });
    return response ? response.body : null;
  }
};
__publicField(Comment, "apiVersion", ApiVersion.July24);
__publicField(Comment, "hasOne", {});
__publicField(Comment, "hasMany", {});
__publicField(Comment, "paths", [
  { "http_method": "get", "operation": "count", "ids": [], "path": "comments/count.json" },
  { "http_method": "get", "operation": "get", "ids": [], "path": "comments.json" },
  { "http_method": "get", "operation": "get", "ids": ["id"], "path": "comments/<id>.json" },
  { "http_method": "post", "operation": "approve", "ids": ["id"], "path": "comments/<id>/approve.json" },
  { "http_method": "post", "operation": "not_spam", "ids": ["id"], "path": "comments/<id>/not_spam.json" },
  { "http_method": "post", "operation": "post", "ids": [], "path": "comments.json" },
  { "http_method": "post", "operation": "remove", "ids": ["id"], "path": "comments/<id>/remove.json" },
  { "http_method": "post", "operation": "restore", "ids": ["id"], "path": "comments/<id>/restore.json" },
  { "http_method": "post", "operation": "spam", "ids": ["id"], "path": "comments/<id>/spam.json" },
  { "http_method": "put", "operation": "put", "ids": ["id"], "path": "comments/<id>.json" }
]);
__publicField(Comment, "resourceNames", [
  {
    "singular": "comment",
    "plural": "comments"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/province.mjs
var Province = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "code");
    __publicField(this, "country_id");
    __publicField(this, "id");
    __publicField(this, "name");
    __publicField(this, "shipping_zone_id");
    __publicField(this, "tax");
    __publicField(this, "tax_name");
    __publicField(this, "tax_percentage");
    __publicField(this, "tax_type");
  }
  static async find({ session, id, country_id = null, fields = null }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id, "country_id": country_id },
      params: { "fields": fields }
    });
    return result.data ? result.data[0] : null;
  }
  static async all({ session, country_id = null, since_id = null, fields = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: { "country_id": country_id },
      params: { "since_id": since_id, "fields": fields, ...otherArgs }
    });
    return response;
  }
  static async count({ session, country_id = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "get",
      operation: "count",
      session,
      urlIds: { "country_id": country_id },
      params: { ...otherArgs },
      body: {},
      entity: null
    });
    return response ? response.body : null;
  }
};
__publicField(Province, "apiVersion", ApiVersion.July24);
__publicField(Province, "hasOne", {});
__publicField(Province, "hasMany", {});
__publicField(Province, "paths", [
  { "http_method": "get", "operation": "count", "ids": ["country_id"], "path": "countries/<country_id>/provinces/count.json" },
  { "http_method": "get", "operation": "get", "ids": ["country_id"], "path": "countries/<country_id>/provinces.json" },
  { "http_method": "get", "operation": "get", "ids": ["country_id", "id"], "path": "countries/<country_id>/provinces/<id>.json" },
  { "http_method": "put", "operation": "put", "ids": ["country_id", "id"], "path": "countries/<country_id>/provinces/<id>.json" }
]);
__publicField(Province, "resourceNames", [
  {
    "singular": "province",
    "plural": "provinces"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/country.mjs
var Country = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "code");
    __publicField(this, "id");
    __publicField(this, "name");
    __publicField(this, "provinces");
    __publicField(this, "tax");
  }
  static async find({ session, id, fields = null }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id },
      params: { "fields": fields }
    });
    return result.data ? result.data[0] : null;
  }
  static async delete({ session, id }) {
    const response = await this.request({
      http_method: "delete",
      operation: "delete",
      session,
      urlIds: { "id": id },
      params: {}
    });
    return response ? response.body : null;
  }
  static async all({ session, since_id = null, fields = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: {},
      params: { "since_id": since_id, "fields": fields, ...otherArgs }
    });
    return response;
  }
  static async count({ session, ...otherArgs }) {
    const response = await this.request({
      http_method: "get",
      operation: "count",
      session,
      urlIds: {},
      params: { ...otherArgs },
      body: {},
      entity: null
    });
    return response ? response.body : null;
  }
};
__publicField(Country, "apiVersion", ApiVersion.July24);
__publicField(Country, "hasOne", {});
__publicField(Country, "hasMany", {
  "provinces": Province
});
__publicField(Country, "paths", [
  { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "countries/<id>.json" },
  { "http_method": "get", "operation": "count", "ids": [], "path": "countries/count.json" },
  { "http_method": "get", "operation": "get", "ids": [], "path": "countries.json" },
  { "http_method": "get", "operation": "get", "ids": ["id"], "path": "countries/<id>.json" },
  { "http_method": "post", "operation": "post", "ids": [], "path": "countries.json" },
  { "http_method": "put", "operation": "put", "ids": ["id"], "path": "countries/<id>.json" }
]);
__publicField(Country, "resourceNames", [
  {
    "singular": "country",
    "plural": "countries"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/custom_collection.mjs
var CustomCollection = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "title");
    __publicField(this, "body_html");
    __publicField(this, "handle");
    __publicField(this, "id");
    __publicField(this, "image");
    __publicField(this, "published");
    __publicField(this, "published_at");
    __publicField(this, "published_scope");
    __publicField(this, "sort_order");
    __publicField(this, "template_suffix");
    __publicField(this, "updated_at");
  }
  static async find({ session, id, fields = null }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id },
      params: { "fields": fields }
    });
    return result.data ? result.data[0] : null;
  }
  static async delete({ session, id }) {
    const response = await this.request({
      http_method: "delete",
      operation: "delete",
      session,
      urlIds: { "id": id },
      params: {}
    });
    return response ? response.body : null;
  }
  static async all({ session, limit = null, ids = null, since_id = null, title = null, product_id = null, handle = null, updated_at_min = null, updated_at_max = null, published_at_min = null, published_at_max = null, published_status = null, fields = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: {},
      params: { "limit": limit, "ids": ids, "since_id": since_id, "title": title, "product_id": product_id, "handle": handle, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "published_at_min": published_at_min, "published_at_max": published_at_max, "published_status": published_status, "fields": fields, ...otherArgs }
    });
    return response;
  }
  static async count({ session, title = null, product_id = null, updated_at_min = null, updated_at_max = null, published_at_min = null, published_at_max = null, published_status = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "get",
      operation: "count",
      session,
      urlIds: {},
      params: { "title": title, "product_id": product_id, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "published_at_min": published_at_min, "published_at_max": published_at_max, "published_status": published_status, ...otherArgs },
      body: {},
      entity: null
    });
    return response ? response.body : null;
  }
};
__publicField(CustomCollection, "apiVersion", ApiVersion.July24);
__publicField(CustomCollection, "hasOne", {});
__publicField(CustomCollection, "hasMany", {});
__publicField(CustomCollection, "paths", [
  { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "custom_collections/<id>.json" },
  { "http_method": "get", "operation": "count", "ids": [], "path": "custom_collections/count.json" },
  { "http_method": "get", "operation": "get", "ids": [], "path": "custom_collections.json" },
  { "http_method": "get", "operation": "get", "ids": ["id"], "path": "custom_collections/<id>.json" },
  { "http_method": "post", "operation": "post", "ids": [], "path": "custom_collections.json" },
  { "http_method": "put", "operation": "put", "ids": ["id"], "path": "custom_collections/<id>.json" }
]);
__publicField(CustomCollection, "resourceNames", [
  {
    "singular": "custom_collection",
    "plural": "custom_collections"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/customer_address.mjs
var CustomerAddress = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "address1");
    __publicField(this, "address2");
    __publicField(this, "city");
    __publicField(this, "company");
    __publicField(this, "country");
    __publicField(this, "country_code");
    __publicField(this, "country_name");
    __publicField(this, "customer_id");
    __publicField(this, "first_name");
    __publicField(this, "id");
    __publicField(this, "is_default");
    __publicField(this, "last_name");
    __publicField(this, "name");
    __publicField(this, "phone");
    __publicField(this, "province");
    __publicField(this, "province_code");
    __publicField(this, "zip");
  }
  static getJsonBodyName() {
    return "address";
  }
  setData(data) {
    var _a;
    if ((_a = this.resource().config.future) == null ? void 0 : _a.customerAddressDefaultFix) {
      if ("default" in data) {
        data["is_default"] = Boolean(data["default"]);
        delete data["default"];
      } else {
        data["is_default"] = false;
      }
    }
    return super.setData(data);
  }
  static async find({ session, id, customer_id = null }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id, "customer_id": customer_id },
      params: {}
    });
    return result.data ? result.data[0] : null;
  }
  static async delete({ session, id, customer_id = null }) {
    const response = await this.request({
      http_method: "delete",
      operation: "delete",
      session,
      urlIds: { "id": id, "customer_id": customer_id },
      params: {}
    });
    return response ? response.body : null;
  }
  static async all({ session, customer_id = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: { "customer_id": customer_id },
      params: { ...otherArgs }
    });
    return response;
  }
  async default({ body = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "put",
      operation: "default",
      session: this.session,
      urlIds: { "id": this.id, "customer_id": this.customer_id },
      params: { ...otherArgs },
      body,
      entity: this
    });
    return response ? response.body : null;
  }
  async set({ address_ids = null, operation = null, body = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "put",
      operation: "set",
      session: this.session,
      urlIds: { "customer_id": this.customer_id },
      params: { "address_ids": address_ids, "operation": operation, ...otherArgs },
      body,
      entity: this
    });
    return response ? response.body : null;
  }
};
__publicField(CustomerAddress, "apiVersion", ApiVersion.July24);
__publicField(CustomerAddress, "hasOne", {});
__publicField(CustomerAddress, "hasMany", {});
__publicField(CustomerAddress, "paths", [
  { "http_method": "delete", "operation": "delete", "ids": ["customer_id", "id"], "path": "customers/<customer_id>/addresses/<id>.json" },
  { "http_method": "get", "operation": "get", "ids": ["customer_id"], "path": "customers/<customer_id>/addresses.json" },
  { "http_method": "get", "operation": "get", "ids": ["customer_id", "id"], "path": "customers/<customer_id>/addresses/<id>.json" },
  { "http_method": "post", "operation": "post", "ids": ["customer_id"], "path": "customers/<customer_id>/addresses.json" },
  { "http_method": "put", "operation": "default", "ids": ["customer_id", "id"], "path": "customers/<customer_id>/addresses/<id>/default.json" },
  { "http_method": "put", "operation": "put", "ids": ["customer_id", "id"], "path": "customers/<customer_id>/addresses/<id>.json" },
  { "http_method": "put", "operation": "set", "ids": ["customer_id"], "path": "customers/<customer_id>/addresses/set.json" }
]);
__publicField(CustomerAddress, "resourceNames", [
  {
    "singular": "customer_address",
    "plural": "customer_addresses"
  },
  {
    "singular": "address",
    "plural": "addresses"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/deprecated_api_call.mjs
var DeprecatedApiCall = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "data_updated_at");
    __publicField(this, "deprecated_api_calls");
  }
  static async all({ session, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: {},
      params: { ...otherArgs }
    });
    return response;
  }
};
__publicField(DeprecatedApiCall, "apiVersion", ApiVersion.July24);
__publicField(DeprecatedApiCall, "hasOne", {});
__publicField(DeprecatedApiCall, "hasMany", {});
__publicField(DeprecatedApiCall, "paths", [
  { "http_method": "get", "operation": "get", "ids": [], "path": "deprecated_api_calls.json" }
]);
__publicField(DeprecatedApiCall, "resourceNames", [
  {
    "singular": "deprecated_api_call",
    "plural": "deprecated_api_calls"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/dispute.mjs
var Dispute = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "amount");
    __publicField(this, "currency");
    __publicField(this, "evidence_due_by");
    __publicField(this, "evidence_sent_on");
    __publicField(this, "finalized_on");
    __publicField(this, "id");
    __publicField(this, "network_reason_code");
    __publicField(this, "order_id");
    __publicField(this, "reason");
    __publicField(this, "status");
    __publicField(this, "type");
  }
  static async find({ session, id }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id },
      params: {}
    });
    return result.data ? result.data[0] : null;
  }
  static async all({ session, since_id = null, last_id = null, status = null, initiated_at = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: {},
      params: { "since_id": since_id, "last_id": last_id, "status": status, "initiated_at": initiated_at, ...otherArgs }
    });
    return response;
  }
};
__publicField(Dispute, "apiVersion", ApiVersion.July24);
__publicField(Dispute, "hasOne", {});
__publicField(Dispute, "hasMany", {});
__publicField(Dispute, "paths", [
  { "http_method": "get", "operation": "get", "ids": [], "path": "shopify_payments/disputes.json" },
  { "http_method": "get", "operation": "get", "ids": ["id"], "path": "shopify_payments/disputes/<id>.json" }
]);
__publicField(Dispute, "resourceNames", [
  {
    "singular": "dispute",
    "plural": "disputes"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/dispute_evidence.mjs
var DisputeEvidence = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "access_activity_log");
    __publicField(this, "billing_address");
    __publicField(this, "cancellation_policy_disclosure");
    __publicField(this, "cancellation_rebuttal");
    __publicField(this, "created_at");
    __publicField(this, "customer_email_address");
    __publicField(this, "customer_first_name");
    __publicField(this, "customer_last_name");
    __publicField(this, "dispute_evidence_files");
    __publicField(this, "fulfillments");
    __publicField(this, "id");
    __publicField(this, "payments_dispute_id");
    __publicField(this, "product_description");
    __publicField(this, "refund_policy_disclosure");
    __publicField(this, "refund_refusal_explanation");
    __publicField(this, "shipping_address");
    __publicField(this, "submitted");
    __publicField(this, "uncategorized_text");
    __publicField(this, "updated_on");
  }
  static async find({ session, dispute_id }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "dispute_id": dispute_id },
      params: {}
    });
    return result.data ? result.data[0] : null;
  }
};
__publicField(DisputeEvidence, "apiVersion", ApiVersion.July24);
__publicField(DisputeEvidence, "hasOne", {});
__publicField(DisputeEvidence, "hasMany", {
  "fulfillments": Fulfillment
});
__publicField(DisputeEvidence, "paths", [
  { "http_method": "get", "operation": "get", "ids": ["dispute_id"], "path": "shopify_payments/disputes/<dispute_id>/dispute_evidences.json" },
  { "http_method": "put", "operation": "put", "ids": ["dispute_id"], "path": "shopify_payments/disputes/<dispute_id>/dispute_evidences.json" }
]);
__publicField(DisputeEvidence, "primaryKey", "dispute_id");
__publicField(DisputeEvidence, "resourceNames", [
  {
    "singular": "dispute_evidence",
    "plural": "dispute_evidences"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/dispute_file_upload.mjs
var DisputeFileUpload = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "dispute_evidence_id");
    __publicField(this, "dispute_evidence_type");
    __publicField(this, "file_size");
    __publicField(this, "file_type");
    __publicField(this, "filename");
    __publicField(this, "id");
    __publicField(this, "original_filename");
    __publicField(this, "shop_id");
    __publicField(this, "url");
  }
  static async delete({ session, id, dispute_id = null }) {
    const response = await this.request({
      http_method: "delete",
      operation: "delete",
      session,
      urlIds: { "id": id, "dispute_id": dispute_id },
      params: {}
    });
    return response ? response.body : null;
  }
};
__publicField(DisputeFileUpload, "apiVersion", ApiVersion.July24);
__publicField(DisputeFileUpload, "hasOne", {});
__publicField(DisputeFileUpload, "hasMany", {});
__publicField(DisputeFileUpload, "paths", [
  { "http_method": "delete", "operation": "delete", "ids": ["dispute_id", "id"], "path": "shopify_payments/disputes/<dispute_id>/dispute_file_uploads/<id>.json" },
  { "http_method": "post", "operation": "post", "ids": ["dispute_id"], "path": "shopify_payments/disputes/<dispute_id>/dispute_file_uploads.json" }
]);
__publicField(DisputeFileUpload, "resourceNames", [
  {
    "singular": "dispute_file_upload",
    "plural": "dispute_file_uploads"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/draft_order.mjs
var DraftOrder = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "applied_discount");
    __publicField(this, "billing_address");
    __publicField(this, "completed_at");
    __publicField(this, "created_at");
    __publicField(this, "currency");
    __publicField(this, "customer");
    __publicField(this, "email");
    __publicField(this, "id");
    __publicField(this, "invoice_sent_at");
    __publicField(this, "invoice_url");
    __publicField(this, "line_items");
    __publicField(this, "name");
    __publicField(this, "note");
    __publicField(this, "note_attributes");
    __publicField(this, "order_id");
    __publicField(this, "payment_terms");
    __publicField(this, "shipping_address");
    __publicField(this, "shipping_line");
    __publicField(this, "source_name");
    __publicField(this, "status");
    __publicField(this, "subtotal_price");
    __publicField(this, "tags");
    __publicField(this, "tax_exempt");
    __publicField(this, "tax_exemptions");
    __publicField(this, "tax_lines");
    __publicField(this, "taxes_included");
    __publicField(this, "total_price");
    __publicField(this, "total_tax");
    __publicField(this, "updated_at");
  }
  static async find({ session, id, fields = null }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id },
      params: { "fields": fields }
    });
    return result.data ? result.data[0] : null;
  }
  static async delete({ session, id }) {
    const response = await this.request({
      http_method: "delete",
      operation: "delete",
      session,
      urlIds: { "id": id },
      params: {}
    });
    return response ? response.body : null;
  }
  static async all({ session, fields = null, limit = null, since_id = null, updated_at_min = null, updated_at_max = null, ids = null, status = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: {},
      params: { "fields": fields, "limit": limit, "since_id": since_id, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "ids": ids, "status": status, ...otherArgs }
    });
    return response;
  }
  static async count({ session, since_id = null, status = null, updated_at_max = null, updated_at_min = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "get",
      operation: "count",
      session,
      urlIds: {},
      params: { "since_id": since_id, "status": status, "updated_at_max": updated_at_max, "updated_at_min": updated_at_min, ...otherArgs },
      body: {},
      entity: null
    });
    return response ? response.body : null;
  }
  async send_invoice({ body = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "post",
      operation: "send_invoice",
      session: this.session,
      urlIds: { "id": this.id },
      params: { ...otherArgs },
      body,
      entity: this
    });
    return response ? response.body : null;
  }
  async complete({ payment_gateway_id = null, payment_pending = null, body = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "put",
      operation: "complete",
      session: this.session,
      urlIds: { "id": this.id },
      params: { "payment_gateway_id": payment_gateway_id, "payment_pending": payment_pending, ...otherArgs },
      body,
      entity: this
    });
    return response ? response.body : null;
  }
};
__publicField(DraftOrder, "apiVersion", ApiVersion.July24);
__publicField(DraftOrder, "hasOne", {
  "customer": Customer
});
__publicField(DraftOrder, "hasMany", {});
__publicField(DraftOrder, "paths", [
  { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "draft_orders/<id>.json" },
  { "http_method": "get", "operation": "count", "ids": [], "path": "draft_orders/count.json" },
  { "http_method": "get", "operation": "get", "ids": [], "path": "draft_orders.json" },
  { "http_method": "get", "operation": "get", "ids": ["id"], "path": "draft_orders/<id>.json" },
  { "http_method": "post", "operation": "post", "ids": [], "path": "draft_orders.json" },
  { "http_method": "post", "operation": "send_invoice", "ids": ["id"], "path": "draft_orders/<id>/send_invoice.json" },
  { "http_method": "put", "operation": "complete", "ids": ["id"], "path": "draft_orders/<id>/complete.json" },
  { "http_method": "put", "operation": "put", "ids": ["id"], "path": "draft_orders/<id>.json" }
]);
__publicField(DraftOrder, "resourceNames", [
  {
    "singular": "draft_order",
    "plural": "draft_orders"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/event.mjs
var Event = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "arguments");
    __publicField(this, "body");
    __publicField(this, "created_at");
    __publicField(this, "description");
    __publicField(this, "id");
    __publicField(this, "message");
    __publicField(this, "path");
    __publicField(this, "subject_id");
    __publicField(this, "subject_type");
    __publicField(this, "verb");
  }
  static async find({ session, id, fields = null }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id },
      params: { "fields": fields }
    });
    return result.data ? result.data[0] : null;
  }
  static async all({ session, order_id = null, product_id = null, limit = null, since_id = null, created_at_min = null, created_at_max = null, filter = null, verb = null, fields = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: { "order_id": order_id, "product_id": product_id },
      params: { "limit": limit, "since_id": since_id, "created_at_min": created_at_min, "created_at_max": created_at_max, "filter": filter, "verb": verb, "fields": fields, ...otherArgs }
    });
    return response;
  }
  static async count({ session, created_at_min = null, created_at_max = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "get",
      operation: "count",
      session,
      urlIds: {},
      params: { "created_at_min": created_at_min, "created_at_max": created_at_max, ...otherArgs },
      body: {},
      entity: null
    });
    return response ? response.body : null;
  }
};
__publicField(Event, "apiVersion", ApiVersion.July24);
__publicField(Event, "hasOne", {});
__publicField(Event, "hasMany", {});
__publicField(Event, "paths", [
  { "http_method": "get", "operation": "count", "ids": [], "path": "events/count.json" },
  { "http_method": "get", "operation": "get", "ids": [], "path": "events.json" },
  { "http_method": "get", "operation": "get", "ids": ["id"], "path": "events/<id>.json" },
  { "http_method": "get", "operation": "get", "ids": ["order_id"], "path": "orders/<order_id>/events.json" },
  { "http_method": "get", "operation": "get", "ids": ["product_id"], "path": "products/<product_id>/events.json" }
]);
__publicField(Event, "resourceNames", [
  {
    "singular": "event",
    "plural": "events"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/fulfillment_event.mjs
var FulfillmentEvent = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "address1");
    __publicField(this, "city");
    __publicField(this, "country");
    __publicField(this, "created_at");
    __publicField(this, "estimated_delivery_at");
    __publicField(this, "fulfillment_id");
    __publicField(this, "happened_at");
    __publicField(this, "id");
    __publicField(this, "latitude");
    __publicField(this, "longitude");
    __publicField(this, "message");
    __publicField(this, "order_id");
    __publicField(this, "province");
    __publicField(this, "shop_id");
    __publicField(this, "status");
    __publicField(this, "updated_at");
    __publicField(this, "zip");
  }
  static getJsonBodyName() {
    return "event";
  }
  static async find({ session, id, order_id = null, fulfillment_id = null, event_id = null }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id, "order_id": order_id, "fulfillment_id": fulfillment_id },
      params: { "event_id": event_id }
    });
    return result.data ? result.data[0] : null;
  }
  static async delete({ session, id, order_id = null, fulfillment_id = null }) {
    const response = await this.request({
      http_method: "delete",
      operation: "delete",
      session,
      urlIds: { "id": id, "order_id": order_id, "fulfillment_id": fulfillment_id },
      params: {}
    });
    return response ? response.body : null;
  }
  static async all({ session, order_id = null, fulfillment_id = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: { "order_id": order_id, "fulfillment_id": fulfillment_id },
      params: { ...otherArgs }
    });
    return response;
  }
};
__publicField(FulfillmentEvent, "apiVersion", ApiVersion.July24);
__publicField(FulfillmentEvent, "hasOne", {
  "country": Country,
  "province": Province
});
__publicField(FulfillmentEvent, "hasMany", {});
__publicField(FulfillmentEvent, "paths", [
  { "http_method": "delete", "operation": "delete", "ids": ["order_id", "fulfillment_id", "id"], "path": "orders/<order_id>/fulfillments/<fulfillment_id>/events/<id>.json" },
  { "http_method": "get", "operation": "get", "ids": ["order_id", "fulfillment_id"], "path": "orders/<order_id>/fulfillments/<fulfillment_id>/events.json" },
  { "http_method": "get", "operation": "get", "ids": ["order_id", "fulfillment_id", "id"], "path": "orders/<order_id>/fulfillments/<fulfillment_id>/events/<id>.json" },
  { "http_method": "post", "operation": "post", "ids": ["order_id", "fulfillment_id"], "path": "orders/<order_id>/fulfillments/<fulfillment_id>/events.json" }
]);
__publicField(FulfillmentEvent, "resourceNames", [
  {
    "singular": "fulfillment_event",
    "plural": "fulfillment_events"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/fulfillment_order.mjs
var FulfillmentOrder = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "assigned_location");
    __publicField(this, "assigned_location_id");
    __publicField(this, "created_at");
    __publicField(this, "delivery_method");
    __publicField(this, "destination");
    __publicField(this, "fulfill_at");
    __publicField(this, "fulfill_by");
    __publicField(this, "fulfillment_holds");
    __publicField(this, "id");
    __publicField(this, "international_duties");
    __publicField(this, "line_items");
    __publicField(this, "merchant_requests");
    __publicField(this, "order_id");
    __publicField(this, "request_status");
    __publicField(this, "shop_id");
    __publicField(this, "status");
    __publicField(this, "supported_actions");
    __publicField(this, "updated_at");
  }
  static async find({ session, id, include_financial_summaries = null, include_order_reference_fields = null }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id },
      params: { "include_financial_summaries": include_financial_summaries, "include_order_reference_fields": include_order_reference_fields }
    });
    return result.data ? result.data[0] : null;
  }
  static async all({ session, order_id = null, include_financial_summaries = null, include_order_reference_fields = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: { "order_id": order_id },
      params: { "include_financial_summaries": include_financial_summaries, "include_order_reference_fields": include_order_reference_fields, ...otherArgs }
    });
    return response;
  }
  async cancel({ body = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "post",
      operation: "cancel",
      session: this.session,
      urlIds: { "id": this.id },
      params: { ...otherArgs },
      body,
      entity: this
    });
    return response ? response.body : null;
  }
  async close({ message = null, body = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "post",
      operation: "close",
      session: this.session,
      urlIds: { "id": this.id },
      params: { "message": message, ...otherArgs },
      body,
      entity: this
    });
    return response ? response.body : null;
  }
  async hold({ fulfillment_hold = null, body = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "post",
      operation: "hold",
      session: this.session,
      urlIds: { "id": this.id },
      params: { "fulfillment_hold": fulfillment_hold, ...otherArgs },
      body,
      entity: this
    });
    return response ? response.body : null;
  }
  async move({ fulfillment_order = null, body = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "post",
      operation: "move",
      session: this.session,
      urlIds: { "id": this.id },
      params: { "fulfillment_order": fulfillment_order, ...otherArgs },
      body,
      entity: this
    });
    return response ? response.body : null;
  }
  async open({ body = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "post",
      operation: "open",
      session: this.session,
      urlIds: { "id": this.id },
      params: { ...otherArgs },
      body,
      entity: this
    });
    return response ? response.body : null;
  }
  async release_hold({ body = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "post",
      operation: "release_hold",
      session: this.session,
      urlIds: { "id": this.id },
      params: { ...otherArgs },
      body,
      entity: this
    });
    return response ? response.body : null;
  }
  async reschedule({ new_fulfill_at = null, body = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "post",
      operation: "reschedule",
      session: this.session,
      urlIds: { "id": this.id },
      params: { "new_fulfill_at": new_fulfill_at, ...otherArgs },
      body,
      entity: this
    });
    return response ? response.body : null;
  }
  async set_fulfillment_orders_deadline({ fulfillment_order_ids = null, fulfillment_deadline = null, body = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "post",
      operation: "set_fulfillment_orders_deadline",
      session: this.session,
      urlIds: {},
      params: { "fulfillment_order_ids": fulfillment_order_ids, "fulfillment_deadline": fulfillment_deadline, ...otherArgs },
      body,
      entity: this
    });
    return response ? response.body : null;
  }
};
__publicField(FulfillmentOrder, "apiVersion", ApiVersion.July24);
__publicField(FulfillmentOrder, "hasOne", {});
__publicField(FulfillmentOrder, "hasMany", {});
__publicField(FulfillmentOrder, "paths", [
  { "http_method": "get", "operation": "get", "ids": ["id"], "path": "fulfillment_orders/<id>.json" },
  { "http_method": "get", "operation": "get", "ids": ["order_id"], "path": "orders/<order_id>/fulfillment_orders.json" },
  { "http_method": "post", "operation": "cancel", "ids": ["id"], "path": "fulfillment_orders/<id>/cancel.json" },
  { "http_method": "post", "operation": "close", "ids": ["id"], "path": "fulfillment_orders/<id>/close.json" },
  { "http_method": "post", "operation": "hold", "ids": ["id"], "path": "fulfillment_orders/<id>/hold.json" },
  { "http_method": "post", "operation": "move", "ids": ["id"], "path": "fulfillment_orders/<id>/move.json" },
  { "http_method": "post", "operation": "open", "ids": ["id"], "path": "fulfillment_orders/<id>/open.json" },
  { "http_method": "post", "operation": "release_hold", "ids": ["id"], "path": "fulfillment_orders/<id>/release_hold.json" },
  { "http_method": "post", "operation": "reschedule", "ids": ["id"], "path": "fulfillment_orders/<id>/reschedule.json" },
  { "http_method": "post", "operation": "set_fulfillment_orders_deadline", "ids": [], "path": "fulfillment_orders/set_fulfillment_orders_deadline.json" }
]);
__publicField(FulfillmentOrder, "resourceNames", [
  {
    "singular": "fulfillment_order",
    "plural": "fulfillment_orders"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/fulfillment_request.mjs
var FulfillmentRequest = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "fulfillment_order_id");
  }
  async accept({ message = null, body = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "post",
      operation: "accept",
      session: this.session,
      urlIds: { "fulfillment_order_id": this.fulfillment_order_id },
      params: { "message": message, ...otherArgs },
      body,
      entity: this
    });
    return response ? response.body : null;
  }
  async reject({ message = null, reason = null, line_items = null, body = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "post",
      operation: "reject",
      session: this.session,
      urlIds: { "fulfillment_order_id": this.fulfillment_order_id },
      params: { "message": message, "reason": reason, "line_items": line_items, ...otherArgs },
      body,
      entity: this
    });
    return response ? response.body : null;
  }
};
__publicField(FulfillmentRequest, "apiVersion", ApiVersion.July24);
__publicField(FulfillmentRequest, "hasOne", {});
__publicField(FulfillmentRequest, "hasMany", {});
__publicField(FulfillmentRequest, "paths", [
  { "http_method": "post", "operation": "accept", "ids": ["fulfillment_order_id"], "path": "fulfillment_orders/<fulfillment_order_id>/fulfillment_request/accept.json" },
  { "http_method": "post", "operation": "post", "ids": ["fulfillment_order_id"], "path": "fulfillment_orders/<fulfillment_order_id>/fulfillment_request.json" },
  { "http_method": "post", "operation": "reject", "ids": ["fulfillment_order_id"], "path": "fulfillment_orders/<fulfillment_order_id>/fulfillment_request/reject.json" }
]);
__publicField(FulfillmentRequest, "resourceNames", [
  {
    "singular": "submitted_fulfillment_order",
    "plural": "submitted_fulfillment_orders"
  },
  {
    "singular": "fulfillment_order",
    "plural": "fulfillment_orders"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/fulfillment_service.mjs
var FulfillmentService = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "admin_graphql_api_id");
    __publicField(this, "callback_url");
    __publicField(this, "fulfillment_orders_opt_in");
    __publicField(this, "handle");
    __publicField(this, "id");
    __publicField(this, "inventory_management");
    __publicField(this, "location_id");
    __publicField(this, "name");
    __publicField(this, "permits_sku_sharing");
    __publicField(this, "provider_id");
    __publicField(this, "requires_shipping_method");
    __publicField(this, "tracking_support");
  }
  static async find({ session, id }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id },
      params: {}
    });
    return result.data ? result.data[0] : null;
  }
  static async delete({ session, id }) {
    const response = await this.request({
      http_method: "delete",
      operation: "delete",
      session,
      urlIds: { "id": id },
      params: {}
    });
    return response ? response.body : null;
  }
  static async all({ session, scope = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: {},
      params: { "scope": scope, ...otherArgs }
    });
    return response;
  }
};
__publicField(FulfillmentService, "apiVersion", ApiVersion.July24);
__publicField(FulfillmentService, "hasOne", {});
__publicField(FulfillmentService, "hasMany", {});
__publicField(FulfillmentService, "paths", [
  { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "fulfillment_services/<id>.json" },
  { "http_method": "get", "operation": "get", "ids": [], "path": "fulfillment_services.json" },
  { "http_method": "get", "operation": "get", "ids": ["id"], "path": "fulfillment_services/<id>.json" },
  { "http_method": "post", "operation": "post", "ids": [], "path": "fulfillment_services.json" },
  { "http_method": "put", "operation": "put", "ids": ["id"], "path": "fulfillment_services/<id>.json" }
]);
__publicField(FulfillmentService, "resourceNames", [
  {
    "singular": "fulfillment_service",
    "plural": "fulfillment_services"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/gift_card_adjustment.mjs
var GiftCardAdjustment = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "amount");
    __publicField(this, "api_client_id");
    __publicField(this, "created_at");
    __publicField(this, "gift_card_id");
    __publicField(this, "id");
    __publicField(this, "note");
    __publicField(this, "number");
    __publicField(this, "order_transaction_id");
    __publicField(this, "processed_at");
    __publicField(this, "remote_transaction_ref");
    __publicField(this, "remote_transaction_url");
    __publicField(this, "user_id");
  }
  static getJsonBodyName() {
    return "adjustment";
  }
  static async find({ session, id, gift_card_id = null }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id, "gift_card_id": gift_card_id },
      params: {}
    });
    return result.data ? result.data[0] : null;
  }
  static async all({ session, gift_card_id = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: { "gift_card_id": gift_card_id },
      params: { ...otherArgs }
    });
    return response;
  }
};
__publicField(GiftCardAdjustment, "apiVersion", ApiVersion.July24);
__publicField(GiftCardAdjustment, "hasOne", {});
__publicField(GiftCardAdjustment, "hasMany", {});
__publicField(GiftCardAdjustment, "paths", [
  { "http_method": "get", "operation": "get", "ids": ["gift_card_id"], "path": "gift_cards/<gift_card_id>/adjustments.json" },
  { "http_method": "get", "operation": "get", "ids": ["gift_card_id", "id"], "path": "gift_cards/<gift_card_id>/adjustments/<id>.json" },
  { "http_method": "post", "operation": "post", "ids": ["gift_card_id"], "path": "gift_cards/<gift_card_id>/adjustments.json" }
]);
__publicField(GiftCardAdjustment, "resourceNames", [
  {
    "singular": "gift_card_adjustment",
    "plural": "gift_card_adjustments"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/inventory_item.mjs
var InventoryItem = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "cost");
    __publicField(this, "country_code_of_origin");
    __publicField(this, "country_harmonized_system_codes");
    __publicField(this, "created_at");
    __publicField(this, "harmonized_system_code");
    __publicField(this, "id");
    __publicField(this, "province_code_of_origin");
    __publicField(this, "requires_shipping");
    __publicField(this, "sku");
    __publicField(this, "tracked");
    __publicField(this, "updated_at");
  }
  static async find({ session, id }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id },
      params: {}
    });
    return result.data ? result.data[0] : null;
  }
  static async all({ session, ids = null, limit = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: {},
      params: { "ids": ids, "limit": limit, ...otherArgs }
    });
    return response;
  }
};
__publicField(InventoryItem, "apiVersion", ApiVersion.July24);
__publicField(InventoryItem, "hasOne", {});
__publicField(InventoryItem, "hasMany", {});
__publicField(InventoryItem, "paths", [
  { "http_method": "get", "operation": "get", "ids": [], "path": "inventory_items.json" },
  { "http_method": "get", "operation": "get", "ids": ["id"], "path": "inventory_items/<id>.json" },
  { "http_method": "put", "operation": "put", "ids": ["id"], "path": "inventory_items/<id>.json" }
]);
__publicField(InventoryItem, "resourceNames", [
  {
    "singular": "inventory_item",
    "plural": "inventory_items"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/inventory_level.mjs
var InventoryLevel = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "available");
    __publicField(this, "inventory_item_id");
    __publicField(this, "location_id");
    __publicField(this, "updated_at");
  }
  static async delete({ session, inventory_item_id = null, location_id = null }) {
    const response = await this.request({
      http_method: "delete",
      operation: "delete",
      session,
      urlIds: {},
      params: { "inventory_item_id": inventory_item_id, "location_id": location_id }
    });
    return response ? response.body : null;
  }
  static async all({ session, inventory_item_ids = null, location_ids = null, limit = null, updated_at_min = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: {},
      params: { "inventory_item_ids": inventory_item_ids, "location_ids": location_ids, "limit": limit, "updated_at_min": updated_at_min, ...otherArgs }
    });
    return response;
  }
  async adjust({ inventory_item_id = null, location_id = null, available_adjustment = null, body = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "post",
      operation: "adjust",
      session: this.session,
      urlIds: {},
      params: { "inventory_item_id": inventory_item_id, "location_id": location_id, "available_adjustment": available_adjustment, ...otherArgs },
      body,
      entity: this
    });
    return response ? response.body : null;
  }
  async connect({ inventory_item_id = null, location_id = null, relocate_if_necessary = null, body = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "post",
      operation: "connect",
      session: this.session,
      urlIds: {},
      params: { "inventory_item_id": inventory_item_id, "location_id": location_id, "relocate_if_necessary": relocate_if_necessary, ...otherArgs },
      body,
      entity: this
    });
    return response ? response.body : null;
  }
  async set({ inventory_item_id = null, location_id = null, available = null, disconnect_if_necessary = null, body = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "post",
      operation: "set",
      session: this.session,
      urlIds: {},
      params: { "inventory_item_id": inventory_item_id, "location_id": location_id, "available": available, "disconnect_if_necessary": disconnect_if_necessary, ...otherArgs },
      body,
      entity: this
    });
    return response ? response.body : null;
  }
};
__publicField(InventoryLevel, "apiVersion", ApiVersion.July24);
__publicField(InventoryLevel, "hasOne", {});
__publicField(InventoryLevel, "hasMany", {});
__publicField(InventoryLevel, "paths", [
  { "http_method": "delete", "operation": "delete", "ids": [], "path": "inventory_levels.json" },
  { "http_method": "get", "operation": "get", "ids": [], "path": "inventory_levels.json" },
  { "http_method": "post", "operation": "adjust", "ids": [], "path": "inventory_levels/adjust.json" },
  { "http_method": "post", "operation": "connect", "ids": [], "path": "inventory_levels/connect.json" },
  { "http_method": "post", "operation": "set", "ids": [], "path": "inventory_levels/set.json" }
]);
__publicField(InventoryLevel, "resourceNames", [
  {
    "singular": "inventory_level",
    "plural": "inventory_levels"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/location.mjs
var Location = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "active");
    __publicField(this, "address1");
    __publicField(this, "address2");
    __publicField(this, "city");
    __publicField(this, "country");
    __publicField(this, "country_code");
    __publicField(this, "created_at");
    __publicField(this, "id");
    __publicField(this, "legacy");
    __publicField(this, "localized_country_name");
    __publicField(this, "localized_province_name");
    __publicField(this, "name");
    __publicField(this, "phone");
    __publicField(this, "province");
    __publicField(this, "province_code");
    __publicField(this, "updated_at");
    __publicField(this, "zip");
  }
  static async find({ session, id }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id },
      params: {}
    });
    return result.data ? result.data[0] : null;
  }
  static async all({ session, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: {},
      params: { ...otherArgs }
    });
    return response;
  }
  static async count({ session, ...otherArgs }) {
    const response = await this.request({
      http_method: "get",
      operation: "count",
      session,
      urlIds: {},
      params: { ...otherArgs },
      body: {},
      entity: null
    });
    return response ? response.body : null;
  }
  static async inventory_levels({ session, id, ...otherArgs }) {
    const response = await this.request({
      http_method: "get",
      operation: "inventory_levels",
      session,
      urlIds: { "id": id },
      params: { ...otherArgs },
      body: {},
      entity: null
    });
    return response ? response.body : null;
  }
};
__publicField(Location, "apiVersion", ApiVersion.July24);
__publicField(Location, "hasOne", {});
__publicField(Location, "hasMany", {});
__publicField(Location, "paths", [
  { "http_method": "get", "operation": "count", "ids": [], "path": "locations/count.json" },
  { "http_method": "get", "operation": "get", "ids": [], "path": "locations.json" },
  { "http_method": "get", "operation": "get", "ids": ["id"], "path": "locations/<id>.json" },
  { "http_method": "get", "operation": "inventory_levels", "ids": ["id"], "path": "locations/<id>/inventory_levels.json" }
]);
__publicField(Location, "resourceNames", [
  {
    "singular": "location",
    "plural": "locations"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/locations_for_move.mjs
var LocationsForMove = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "locations_for_move");
  }
  static async all({ session, fulfillment_order_id = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: { "fulfillment_order_id": fulfillment_order_id },
      params: { ...otherArgs }
    });
    return response;
  }
};
__publicField(LocationsForMove, "apiVersion", ApiVersion.July24);
__publicField(LocationsForMove, "hasOne", {});
__publicField(LocationsForMove, "hasMany", {});
__publicField(LocationsForMove, "paths", [
  { "http_method": "get", "operation": "get", "ids": ["fulfillment_order_id"], "path": "fulfillment_orders/<fulfillment_order_id>/locations_for_move.json" }
]);
__publicField(LocationsForMove, "resourceNames", [
  {
    "singular": "locations_for_move",
    "plural": "locations_for_moves"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/marketing_event.mjs
var MarketingEvent = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "event_type");
    __publicField(this, "marketing_channel");
    __publicField(this, "paid");
    __publicField(this, "started_at");
    __publicField(this, "UTM_parameters");
    __publicField(this, "budget");
    __publicField(this, "budget_type");
    __publicField(this, "currency");
    __publicField(this, "description");
    __publicField(this, "ended_at");
    __publicField(this, "id");
    __publicField(this, "manage_url");
    __publicField(this, "marketed_resources");
    __publicField(this, "preview_url");
    __publicField(this, "referring_domain");
    __publicField(this, "remote_id");
    __publicField(this, "scheduled_to_end_at");
  }
  static async find({ session, id }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id },
      params: {}
    });
    return result.data ? result.data[0] : null;
  }
  static async delete({ session, id }) {
    const response = await this.request({
      http_method: "delete",
      operation: "delete",
      session,
      urlIds: { "id": id },
      params: {}
    });
    return response ? response.body : null;
  }
  static async all({ session, limit = null, offset = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: {},
      params: { "limit": limit, "offset": offset, ...otherArgs }
    });
    return response;
  }
  static async count({ session, ...otherArgs }) {
    const response = await this.request({
      http_method: "get",
      operation: "count",
      session,
      urlIds: {},
      params: { ...otherArgs },
      body: {},
      entity: null
    });
    return response ? response.body : null;
  }
  async engagements({ occurred_on = null, impressions_count = null, views_count = null, clicks_count = null, shares_count = null, favorites_count = null, comments_count = null, ad_spend = null, is_cumulative = null, body = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "post",
      operation: "engagements",
      session: this.session,
      urlIds: { "id": this.id },
      params: { "occurred_on": occurred_on, "impressions_count": impressions_count, "views_count": views_count, "clicks_count": clicks_count, "shares_count": shares_count, "favorites_count": favorites_count, "comments_count": comments_count, "ad_spend": ad_spend, "is_cumulative": is_cumulative, ...otherArgs },
      body,
      entity: this
    });
    return response ? response.body : null;
  }
};
__publicField(MarketingEvent, "apiVersion", ApiVersion.July24);
__publicField(MarketingEvent, "hasOne", {});
__publicField(MarketingEvent, "hasMany", {});
__publicField(MarketingEvent, "paths", [
  { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "marketing_events/<id>.json" },
  { "http_method": "get", "operation": "count", "ids": [], "path": "marketing_events/count.json" },
  { "http_method": "get", "operation": "get", "ids": [], "path": "marketing_events.json" },
  { "http_method": "get", "operation": "get", "ids": ["id"], "path": "marketing_events/<id>.json" },
  { "http_method": "post", "operation": "engagements", "ids": ["id"], "path": "marketing_events/<id>/engagements.json" },
  { "http_method": "post", "operation": "post", "ids": [], "path": "marketing_events.json" },
  { "http_method": "put", "operation": "put", "ids": ["id"], "path": "marketing_events/<id>.json" }
]);
__publicField(MarketingEvent, "resourceNames", [
  {
    "singular": "marketing_event",
    "plural": "marketing_events"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/mobile_platform_application.mjs
var MobilePlatformApplication = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "application_id");
    __publicField(this, "enabled_shared_webcredentials");
    __publicField(this, "enabled_universal_or_app_links");
    __publicField(this, "id");
    __publicField(this, "platform");
    __publicField(this, "sha256_cert_fingerprints");
  }
  static async find({ session, id }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id },
      params: {}
    });
    return result.data ? result.data[0] : null;
  }
  static async delete({ session, id }) {
    const response = await this.request({
      http_method: "delete",
      operation: "delete",
      session,
      urlIds: { "id": id },
      params: {}
    });
    return response ? response.body : null;
  }
  static async all({ session, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: {},
      params: { ...otherArgs }
    });
    return response;
  }
};
__publicField(MobilePlatformApplication, "apiVersion", ApiVersion.July24);
__publicField(MobilePlatformApplication, "hasOne", {});
__publicField(MobilePlatformApplication, "hasMany", {});
__publicField(MobilePlatformApplication, "paths", [
  { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "mobile_platform_applications/<id>.json" },
  { "http_method": "get", "operation": "get", "ids": [], "path": "mobile_platform_applications.json" },
  { "http_method": "get", "operation": "get", "ids": ["id"], "path": "mobile_platform_applications/<id>.json" },
  { "http_method": "post", "operation": "post", "ids": [], "path": "mobile_platform_applications.json" },
  { "http_method": "put", "operation": "put", "ids": ["id"], "path": "mobile_platform_applications/<id>.json" }
]);
__publicField(MobilePlatformApplication, "resourceNames", [
  {
    "singular": "mobile_platform_application",
    "plural": "mobile_platform_applications"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/order_risk.mjs
var OrderRisk = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "cause_cancel");
    __publicField(this, "checkout_id");
    __publicField(this, "display");
    __publicField(this, "id");
    __publicField(this, "merchant_message");
    __publicField(this, "message");
    __publicField(this, "order_id");
    __publicField(this, "recommendation");
    __publicField(this, "score");
    __publicField(this, "source");
  }
  static getJsonBodyName() {
    return "risk";
  }
  static async find({ session, id, order_id = null }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id, "order_id": order_id },
      params: {}
    });
    return result.data ? result.data[0] : null;
  }
  static async delete({ session, id, order_id = null }) {
    const response = await this.request({
      http_method: "delete",
      operation: "delete",
      session,
      urlIds: { "id": id, "order_id": order_id },
      params: {}
    });
    return response ? response.body : null;
  }
  static async all({ session, order_id = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: { "order_id": order_id },
      params: { ...otherArgs }
    });
    return response;
  }
};
__publicField(OrderRisk, "apiVersion", ApiVersion.July24);
__publicField(OrderRisk, "hasOne", {});
__publicField(OrderRisk, "hasMany", {});
__publicField(OrderRisk, "paths", [
  { "http_method": "delete", "operation": "delete", "ids": ["order_id", "id"], "path": "orders/<order_id>/risks/<id>.json" },
  { "http_method": "get", "operation": "get", "ids": ["order_id"], "path": "orders/<order_id>/risks.json" },
  { "http_method": "get", "operation": "get", "ids": ["order_id", "id"], "path": "orders/<order_id>/risks/<id>.json" },
  { "http_method": "post", "operation": "post", "ids": ["order_id"], "path": "orders/<order_id>/risks.json" },
  { "http_method": "put", "operation": "put", "ids": ["order_id", "id"], "path": "orders/<order_id>/risks/<id>.json" }
]);
__publicField(OrderRisk, "resourceNames", [
  {
    "singular": "risk",
    "plural": "risks"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/page.mjs
var Page = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "admin_graphql_api_id");
    __publicField(this, "author");
    __publicField(this, "body_html");
    __publicField(this, "created_at");
    __publicField(this, "handle");
    __publicField(this, "id");
    __publicField(this, "metafield");
    __publicField(this, "published_at");
    __publicField(this, "shop_id");
    __publicField(this, "template_suffix");
    __publicField(this, "title");
    __publicField(this, "updated_at");
  }
  static async find({ session, id, fields = null }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id },
      params: { "fields": fields }
    });
    return result.data ? result.data[0] : null;
  }
  static async delete({ session, id }) {
    const response = await this.request({
      http_method: "delete",
      operation: "delete",
      session,
      urlIds: { "id": id },
      params: {}
    });
    return response ? response.body : null;
  }
  static async all({ session, limit = null, since_id = null, title = null, handle = null, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, published_at_min = null, published_at_max = null, fields = null, published_status = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: {},
      params: { "limit": limit, "since_id": since_id, "title": title, "handle": handle, "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "published_at_min": published_at_min, "published_at_max": published_at_max, "fields": fields, "published_status": published_status, ...otherArgs }
    });
    return response;
  }
  static async count({ session, title = null, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, published_at_min = null, published_at_max = null, published_status = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "get",
      operation: "count",
      session,
      urlIds: {},
      params: { "title": title, "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "published_at_min": published_at_min, "published_at_max": published_at_max, "published_status": published_status, ...otherArgs },
      body: {},
      entity: null
    });
    return response ? response.body : null;
  }
};
__publicField(Page, "apiVersion", ApiVersion.July24);
__publicField(Page, "hasOne", {
  "metafield": Metafield
});
__publicField(Page, "hasMany", {});
__publicField(Page, "paths", [
  { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "pages/<id>.json" },
  { "http_method": "get", "operation": "count", "ids": [], "path": "pages/count.json" },
  { "http_method": "get", "operation": "get", "ids": [], "path": "pages.json" },
  { "http_method": "get", "operation": "get", "ids": ["id"], "path": "pages/<id>.json" },
  { "http_method": "post", "operation": "post", "ids": [], "path": "pages.json" },
  { "http_method": "put", "operation": "put", "ids": ["id"], "path": "pages/<id>.json" }
]);
__publicField(Page, "resourceNames", [
  {
    "singular": "page",
    "plural": "pages"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/payment.mjs
var Payment = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "checkout");
    __publicField(this, "credit_card");
    __publicField(this, "id");
    __publicField(this, "next_action");
    __publicField(this, "payment_processing_error_message");
    __publicField(this, "transaction");
    __publicField(this, "unique_token");
  }
  static async find({ session, id, checkout_id = null }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id, "checkout_id": checkout_id },
      params: {}
    });
    return result.data ? result.data[0] : null;
  }
  static async all({ session, checkout_id = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: { "checkout_id": checkout_id },
      params: { ...otherArgs }
    });
    return response;
  }
  static async count({ session, checkout_id = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "get",
      operation: "count",
      session,
      urlIds: { "checkout_id": checkout_id },
      params: { ...otherArgs },
      body: {},
      entity: null
    });
    return response ? response.body : null;
  }
};
__publicField(Payment, "apiVersion", ApiVersion.July24);
__publicField(Payment, "hasOne", {
  "transaction": Transaction,
  "checkout": Checkout
});
__publicField(Payment, "hasMany", {});
__publicField(Payment, "paths", [
  { "http_method": "get", "operation": "count", "ids": ["checkout_id"], "path": "checkouts/<checkout_id>/payments/count.json" },
  { "http_method": "get", "operation": "get", "ids": ["checkout_id"], "path": "checkouts/<checkout_id>/payments.json" },
  { "http_method": "get", "operation": "get", "ids": ["checkout_id", "id"], "path": "checkouts/<checkout_id>/payments/<id>.json" },
  { "http_method": "post", "operation": "post", "ids": ["checkout_id"], "path": "checkouts/<checkout_id>/payments.json" }
]);
__publicField(Payment, "resourceNames", [
  {
    "singular": "payment",
    "plural": "payments"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/payment_gateway.mjs
var PaymentGateway = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "attachment");
    __publicField(this, "created_at");
    __publicField(this, "credential1");
    __publicField(this, "credential2");
    __publicField(this, "credential3");
    __publicField(this, "credential4");
    __publicField(this, "disabled");
    __publicField(this, "enabled_card_brands");
    __publicField(this, "id");
    __publicField(this, "name");
    __publicField(this, "processing_method");
    __publicField(this, "provider_id");
    __publicField(this, "sandbox");
    __publicField(this, "service_name");
    __publicField(this, "supports_network_tokenization");
    __publicField(this, "type");
    __publicField(this, "updated_at");
  }
  static async find({ session, id }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id },
      params: {}
    });
    return result.data ? result.data[0] : null;
  }
  static async delete({ session, id }) {
    const response = await this.request({
      http_method: "delete",
      operation: "delete",
      session,
      urlIds: { "id": id },
      params: {}
    });
    return response ? response.body : null;
  }
  static async all({ session, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: {},
      params: { ...otherArgs }
    });
    return response;
  }
};
__publicField(PaymentGateway, "apiVersion", ApiVersion.July24);
__publicField(PaymentGateway, "hasOne", {});
__publicField(PaymentGateway, "hasMany", {});
__publicField(PaymentGateway, "paths", [
  { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "payment_gateways/<id>.json" },
  { "http_method": "get", "operation": "get", "ids": [], "path": "payment_gateways.json" },
  { "http_method": "get", "operation": "get", "ids": ["id"], "path": "payment_gateways/<id>.json" },
  { "http_method": "post", "operation": "post", "ids": [], "path": "payment_gateways.json" },
  { "http_method": "put", "operation": "put", "ids": ["id"], "path": "payment_gateways/<id>.json" }
]);
__publicField(PaymentGateway, "resourceNames", [
  {
    "singular": "payment_gateway",
    "plural": "payment_gateways"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/payment_transaction.mjs
var PaymentTransaction = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "adjustment_order_transactions");
    __publicField(this, "amount");
    __publicField(this, "currency");
    __publicField(this, "fee");
    __publicField(this, "id");
    __publicField(this, "net");
    __publicField(this, "payout_id");
    __publicField(this, "payout_status");
    __publicField(this, "processed_at");
    __publicField(this, "source_id");
    __publicField(this, "source_order_id");
    __publicField(this, "source_order_transaction_id");
    __publicField(this, "source_type");
    __publicField(this, "test");
    __publicField(this, "type");
  }
  static async transactions({ session, since_id = null, last_id = null, test = null, payout_id = null, payout_status = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "get",
      operation: "transactions",
      session,
      urlIds: {},
      params: { "since_id": since_id, "last_id": last_id, "test": test, "payout_id": payout_id, "payout_status": payout_status, ...otherArgs },
      body: {},
      entity: null
    });
    return response ? response.body : null;
  }
};
__publicField(PaymentTransaction, "apiVersion", ApiVersion.July24);
__publicField(PaymentTransaction, "hasOne", {
  "currency": Currency
});
__publicField(PaymentTransaction, "hasMany", {});
__publicField(PaymentTransaction, "paths", [
  { "http_method": "get", "operation": "transactions", "ids": [], "path": "shopify_payments/balance/transactions.json" }
]);
__publicField(PaymentTransaction, "resourceNames", [
  {
    "singular": "payment_transaction",
    "plural": "payment_transactions"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/payout.mjs
var Payout = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "amount");
    __publicField(this, "currency");
    __publicField(this, "date");
    __publicField(this, "id");
    __publicField(this, "status");
  }
  static async find({ session, id }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id },
      params: {}
    });
    return result.data ? result.data[0] : null;
  }
  static async all({ session, since_id = null, last_id = null, date_min = null, date_max = null, date = null, status = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: {},
      params: { "since_id": since_id, "last_id": last_id, "date_min": date_min, "date_max": date_max, "date": date, "status": status, ...otherArgs }
    });
    return response;
  }
};
__publicField(Payout, "apiVersion", ApiVersion.July24);
__publicField(Payout, "hasOne", {});
__publicField(Payout, "hasMany", {});
__publicField(Payout, "paths", [
  { "http_method": "get", "operation": "get", "ids": [], "path": "shopify_payments/payouts.json" },
  { "http_method": "get", "operation": "get", "ids": ["id"], "path": "shopify_payments/payouts/<id>.json" }
]);
__publicField(Payout, "resourceNames", [
  {
    "singular": "payout",
    "plural": "payouts"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/policy.mjs
var Policy = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "body");
    __publicField(this, "created_at");
    __publicField(this, "handle");
    __publicField(this, "title");
    __publicField(this, "updated_at");
    __publicField(this, "url");
  }
  static async all({ session, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: {},
      params: { ...otherArgs }
    });
    return response;
  }
};
__publicField(Policy, "apiVersion", ApiVersion.July24);
__publicField(Policy, "hasOne", {});
__publicField(Policy, "hasMany", {});
__publicField(Policy, "paths", [
  { "http_method": "get", "operation": "get", "ids": [], "path": "policies.json" }
]);
__publicField(Policy, "resourceNames", [
  {
    "singular": "policy",
    "plural": "policies"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/price_rule.mjs
var PriceRule = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "allocation_limit");
    __publicField(this, "allocation_method");
    __publicField(this, "created_at");
    __publicField(this, "customer_segment_prerequisite_ids");
    __publicField(this, "customer_selection");
    __publicField(this, "ends_at");
    __publicField(this, "entitled_collection_ids");
    __publicField(this, "entitled_country_ids");
    __publicField(this, "entitled_product_ids");
    __publicField(this, "entitled_variant_ids");
    __publicField(this, "id");
    __publicField(this, "once_per_customer");
    __publicField(this, "prerequisite_collection_ids");
    __publicField(this, "prerequisite_customer_ids");
    __publicField(this, "prerequisite_product_ids");
    __publicField(this, "prerequisite_quantity_range");
    __publicField(this, "prerequisite_shipping_price_range");
    __publicField(this, "prerequisite_subtotal_range");
    __publicField(this, "prerequisite_to_entitlement_purchase");
    __publicField(this, "prerequisite_to_entitlement_quantity_ratio");
    __publicField(this, "prerequisite_variant_ids");
    __publicField(this, "starts_at");
    __publicField(this, "target_selection");
    __publicField(this, "target_type");
    __publicField(this, "title");
    __publicField(this, "updated_at");
    __publicField(this, "usage_limit");
    __publicField(this, "value");
    __publicField(this, "value_type");
  }
  static async find({ session, id }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id },
      params: {}
    });
    return result.data ? result.data[0] : null;
  }
  static async delete({ session, id }) {
    const response = await this.request({
      http_method: "delete",
      operation: "delete",
      session,
      urlIds: { "id": id },
      params: {}
    });
    return response ? response.body : null;
  }
  static async all({ session, limit = null, since_id = null, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, starts_at_min = null, starts_at_max = null, ends_at_min = null, ends_at_max = null, times_used = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: {},
      params: { "limit": limit, "since_id": since_id, "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "starts_at_min": starts_at_min, "starts_at_max": starts_at_max, "ends_at_min": ends_at_min, "ends_at_max": ends_at_max, "times_used": times_used, ...otherArgs }
    });
    return response;
  }
  static async count({ session, ...otherArgs }) {
    const response = await this.request({
      http_method: "get",
      operation: "count",
      session,
      urlIds: {},
      params: { ...otherArgs },
      body: {},
      entity: null
    });
    return response ? response.body : null;
  }
};
__publicField(PriceRule, "apiVersion", ApiVersion.July24);
__publicField(PriceRule, "hasOne", {});
__publicField(PriceRule, "hasMany", {});
__publicField(PriceRule, "paths", [
  { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "price_rules/<id>.json" },
  { "http_method": "get", "operation": "count", "ids": [], "path": "price_rules/count.json" },
  { "http_method": "get", "operation": "get", "ids": [], "path": "price_rules.json" },
  { "http_method": "get", "operation": "get", "ids": ["id"], "path": "price_rules/<id>.json" },
  { "http_method": "post", "operation": "post", "ids": [], "path": "price_rules.json" },
  { "http_method": "put", "operation": "put", "ids": ["id"], "path": "price_rules/<id>.json" }
]);
__publicField(PriceRule, "resourceNames", [
  {
    "singular": "price_rule",
    "plural": "price_rules"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/variant.mjs
var Variant = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "barcode");
    __publicField(this, "compare_at_price");
    __publicField(this, "created_at");
    __publicField(this, "fulfillment_service");
    __publicField(this, "grams");
    __publicField(this, "id");
    __publicField(this, "image_id");
    __publicField(this, "inventory_item_id");
    __publicField(this, "inventory_management");
    __publicField(this, "inventory_policy");
    __publicField(this, "inventory_quantity");
    __publicField(this, "old_inventory_quantity");
    __publicField(this, "option");
    __publicField(this, "position");
    __publicField(this, "presentment_prices");
    __publicField(this, "price");
    __publicField(this, "product_id");
    __publicField(this, "requires_shipping");
    __publicField(this, "sku");
    __publicField(this, "tax_code");
    __publicField(this, "taxable");
    __publicField(this, "title");
    __publicField(this, "updated_at");
    __publicField(this, "weight");
    __publicField(this, "weight_unit");
  }
  static async find({ session, id, fields = null }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id },
      params: { "fields": fields }
    });
    return result.data ? result.data[0] : null;
  }
  static async delete({ session, id, product_id = null }) {
    const response = await this.request({
      http_method: "delete",
      operation: "delete",
      session,
      urlIds: { "id": id, "product_id": product_id },
      params: {}
    });
    return response ? response.body : null;
  }
  static async all({ session, product_id = null, limit = null, presentment_currencies = null, since_id = null, fields = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: { "product_id": product_id },
      params: { "limit": limit, "presentment_currencies": presentment_currencies, "since_id": since_id, "fields": fields, ...otherArgs }
    });
    return response;
  }
  static async count({ session, product_id = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "get",
      operation: "count",
      session,
      urlIds: { "product_id": product_id },
      params: { ...otherArgs },
      body: {},
      entity: null
    });
    return response ? response.body : null;
  }
};
__publicField(Variant, "apiVersion", ApiVersion.July24);
__publicField(Variant, "hasOne", {});
__publicField(Variant, "hasMany", {});
__publicField(Variant, "paths", [
  { "http_method": "delete", "operation": "delete", "ids": ["product_id", "id"], "path": "products/<product_id>/variants/<id>.json" },
  { "http_method": "get", "operation": "count", "ids": ["product_id"], "path": "products/<product_id>/variants/count.json" },
  { "http_method": "get", "operation": "get", "ids": ["product_id"], "path": "products/<product_id>/variants.json" },
  { "http_method": "get", "operation": "get", "ids": ["id"], "path": "variants/<id>.json" },
  { "http_method": "post", "operation": "post", "ids": ["product_id"], "path": "products/<product_id>/variants.json" },
  { "http_method": "put", "operation": "put", "ids": ["id"], "path": "variants/<id>.json" }
]);
__publicField(Variant, "readOnlyAttributes", [
  "inventory_quantity"
]);
__publicField(Variant, "resourceNames", [
  {
    "singular": "variant",
    "plural": "variants"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/product.mjs
var Product = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "title");
    __publicField(this, "body_html");
    __publicField(this, "created_at");
    __publicField(this, "handle");
    __publicField(this, "id");
    __publicField(this, "images");
    __publicField(this, "options");
    __publicField(this, "product_type");
    __publicField(this, "published_at");
    __publicField(this, "published_scope");
    __publicField(this, "status");
    __publicField(this, "tags");
    __publicField(this, "template_suffix");
    __publicField(this, "updated_at");
    __publicField(this, "variants");
    __publicField(this, "vendor");
  }
  static async find({ session, id, fields = null }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id },
      params: { "fields": fields }
    });
    return result.data ? result.data[0] : null;
  }
  static async delete({ session, id }) {
    const response = await this.request({
      http_method: "delete",
      operation: "delete",
      session,
      urlIds: { "id": id },
      params: {}
    });
    return response ? response.body : null;
  }
  static async all({ session, ids = null, limit = null, since_id = null, title = null, vendor = null, handle = null, product_type = null, status = null, collection_id = null, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, published_at_min = null, published_at_max = null, published_status = null, fields = null, presentment_currencies = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: {},
      params: { "ids": ids, "limit": limit, "since_id": since_id, "title": title, "vendor": vendor, "handle": handle, "product_type": product_type, "status": status, "collection_id": collection_id, "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "published_at_min": published_at_min, "published_at_max": published_at_max, "published_status": published_status, "fields": fields, "presentment_currencies": presentment_currencies, ...otherArgs }
    });
    return response;
  }
  static async count({ session, vendor = null, product_type = null, collection_id = null, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, published_at_min = null, published_at_max = null, published_status = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "get",
      operation: "count",
      session,
      urlIds: {},
      params: { "vendor": vendor, "product_type": product_type, "collection_id": collection_id, "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "published_at_min": published_at_min, "published_at_max": published_at_max, "published_status": published_status, ...otherArgs },
      body: {},
      entity: null
    });
    return response ? response.body : null;
  }
};
__publicField(Product, "apiVersion", ApiVersion.July24);
__publicField(Product, "hasOne", {});
__publicField(Product, "hasMany", {
  "images": Image,
  "variants": Variant
});
__publicField(Product, "paths", [
  { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "products/<id>.json" },
  { "http_method": "get", "operation": "count", "ids": [], "path": "products/count.json" },
  { "http_method": "get", "operation": "get", "ids": [], "path": "products.json" },
  { "http_method": "get", "operation": "get", "ids": ["id"], "path": "products/<id>.json" },
  { "http_method": "post", "operation": "post", "ids": [], "path": "products.json" },
  { "http_method": "put", "operation": "put", "ids": ["id"], "path": "products/<id>.json" }
]);
__publicField(Product, "resourceNames", [
  {
    "singular": "product",
    "plural": "products"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/product_listing.mjs
var ProductListing = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "body_html");
    __publicField(this, "created_at");
    __publicField(this, "handle");
    __publicField(this, "images");
    __publicField(this, "options");
    __publicField(this, "product_id");
    __publicField(this, "product_type");
    __publicField(this, "published_at");
    __publicField(this, "tags");
    __publicField(this, "title");
    __publicField(this, "updated_at");
    __publicField(this, "variants");
    __publicField(this, "vendor");
  }
  static async find({ session, product_id }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "product_id": product_id },
      params: {}
    });
    return result.data ? result.data[0] : null;
  }
  static async delete({ session, product_id }) {
    const response = await this.request({
      http_method: "delete",
      operation: "delete",
      session,
      urlIds: { "product_id": product_id },
      params: {}
    });
    return response ? response.body : null;
  }
  static async all({ session, product_ids = null, limit = null, collection_id = null, updated_at_min = null, handle = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: {},
      params: { "product_ids": product_ids, "limit": limit, "collection_id": collection_id, "updated_at_min": updated_at_min, "handle": handle, ...otherArgs }
    });
    return response;
  }
  static async count({ session, ...otherArgs }) {
    const response = await this.request({
      http_method: "get",
      operation: "count",
      session,
      urlIds: {},
      params: { ...otherArgs },
      body: {},
      entity: null
    });
    return response ? response.body : null;
  }
  static async product_ids({ session, limit = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "get",
      operation: "product_ids",
      session,
      urlIds: {},
      params: { "limit": limit, ...otherArgs },
      body: {},
      entity: null
    });
    return response ? response.body : null;
  }
};
__publicField(ProductListing, "apiVersion", ApiVersion.July24);
__publicField(ProductListing, "hasOne", {});
__publicField(ProductListing, "hasMany", {
  "images": Image,
  "variants": Variant
});
__publicField(ProductListing, "paths", [
  { "http_method": "delete", "operation": "delete", "ids": ["product_id"], "path": "product_listings/<product_id>.json" },
  { "http_method": "get", "operation": "count", "ids": [], "path": "product_listings/count.json" },
  { "http_method": "get", "operation": "get", "ids": [], "path": "product_listings.json" },
  { "http_method": "get", "operation": "get", "ids": ["product_id"], "path": "product_listings/<product_id>.json" },
  { "http_method": "get", "operation": "product_ids", "ids": [], "path": "product_listings/product_ids.json" },
  { "http_method": "put", "operation": "put", "ids": ["product_id"], "path": "product_listings/<product_id>.json" }
]);
__publicField(ProductListing, "primaryKey", "product_id");
__publicField(ProductListing, "resourceNames", [
  {
    "singular": "product_listing",
    "plural": "product_listings"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/product_resource_feedback.mjs
var ProductResourceFeedback = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "created_at");
    __publicField(this, "feedback_generated_at");
    __publicField(this, "messages");
    __publicField(this, "product_id");
    __publicField(this, "resource_id");
    __publicField(this, "resource_type");
    __publicField(this, "resource_updated_at");
    __publicField(this, "state");
    __publicField(this, "updated_at");
  }
  static getJsonBodyName() {
    return "resource_feedback";
  }
  static async all({ session, product_id = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: { "product_id": product_id },
      params: { ...otherArgs }
    });
    return response;
  }
};
__publicField(ProductResourceFeedback, "apiVersion", ApiVersion.July24);
__publicField(ProductResourceFeedback, "hasOne", {});
__publicField(ProductResourceFeedback, "hasMany", {});
__publicField(ProductResourceFeedback, "paths", [
  { "http_method": "get", "operation": "get", "ids": ["product_id"], "path": "products/<product_id>/resource_feedback.json" },
  { "http_method": "post", "operation": "post", "ids": ["product_id"], "path": "products/<product_id>/resource_feedback.json" }
]);
__publicField(ProductResourceFeedback, "resourceNames", [
  {
    "singular": "product_resource_feedback",
    "plural": "product_resource_feedbacks"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/recurring_application_charge.mjs
var RecurringApplicationCharge = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "activated_on");
    __publicField(this, "billing_on");
    __publicField(this, "cancelled_on");
    __publicField(this, "capped_amount");
    __publicField(this, "confirmation_url");
    __publicField(this, "created_at");
    __publicField(this, "currency");
    __publicField(this, "id");
    __publicField(this, "name");
    __publicField(this, "price");
    __publicField(this, "return_url");
    __publicField(this, "status");
    __publicField(this, "terms");
    __publicField(this, "test");
    __publicField(this, "trial_days");
    __publicField(this, "trial_ends_on");
    __publicField(this, "updated_at");
  }
  static async find({ session, id, fields = null }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id },
      params: { "fields": fields }
    });
    return result.data ? result.data[0] : null;
  }
  static async delete({ session, id }) {
    const response = await this.request({
      http_method: "delete",
      operation: "delete",
      session,
      urlIds: { "id": id },
      params: {}
    });
    return response ? response.body : null;
  }
  static async all({ session, since_id = null, fields = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: {},
      params: { "since_id": since_id, "fields": fields, ...otherArgs }
    });
    return response;
  }
  async customize({ body = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "put",
      operation: "customize",
      session: this.session,
      urlIds: { "id": this.id },
      params: { ...otherArgs },
      body,
      entity: this
    });
    return response ? response.body : null;
  }
};
__publicField(RecurringApplicationCharge, "apiVersion", ApiVersion.July24);
__publicField(RecurringApplicationCharge, "hasOne", {});
__publicField(RecurringApplicationCharge, "hasMany", {});
__publicField(RecurringApplicationCharge, "paths", [
  { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "recurring_application_charges/<id>.json" },
  { "http_method": "get", "operation": "get", "ids": [], "path": "recurring_application_charges.json" },
  { "http_method": "get", "operation": "get", "ids": ["id"], "path": "recurring_application_charges/<id>.json" },
  { "http_method": "post", "operation": "post", "ids": [], "path": "recurring_application_charges.json" },
  { "http_method": "put", "operation": "customize", "ids": ["id"], "path": "recurring_application_charges/<id>/customize.json" }
]);
__publicField(RecurringApplicationCharge, "resourceNames", [
  {
    "singular": "recurring_application_charge",
    "plural": "recurring_application_charges"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/redirect.mjs
var Redirect = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "id");
    __publicField(this, "path");
    __publicField(this, "target");
  }
  static async find({ session, id, fields = null }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id },
      params: { "fields": fields }
    });
    return result.data ? result.data[0] : null;
  }
  static async delete({ session, id }) {
    const response = await this.request({
      http_method: "delete",
      operation: "delete",
      session,
      urlIds: { "id": id },
      params: {}
    });
    return response ? response.body : null;
  }
  static async all({ session, limit = null, since_id = null, path = null, target = null, fields = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: {},
      params: { "limit": limit, "since_id": since_id, "path": path, "target": target, "fields": fields, ...otherArgs }
    });
    return response;
  }
  static async count({ session, path = null, target = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "get",
      operation: "count",
      session,
      urlIds: {},
      params: { "path": path, "target": target, ...otherArgs },
      body: {},
      entity: null
    });
    return response ? response.body : null;
  }
};
__publicField(Redirect, "apiVersion", ApiVersion.July24);
__publicField(Redirect, "hasOne", {});
__publicField(Redirect, "hasMany", {});
__publicField(Redirect, "paths", [
  { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "redirects/<id>.json" },
  { "http_method": "get", "operation": "count", "ids": [], "path": "redirects/count.json" },
  { "http_method": "get", "operation": "get", "ids": [], "path": "redirects.json" },
  { "http_method": "get", "operation": "get", "ids": ["id"], "path": "redirects/<id>.json" },
  { "http_method": "post", "operation": "post", "ids": [], "path": "redirects.json" },
  { "http_method": "put", "operation": "put", "ids": ["id"], "path": "redirects/<id>.json" }
]);
__publicField(Redirect, "resourceNames", [
  {
    "singular": "redirect",
    "plural": "redirects"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/resource_feedback.mjs
var ResourceFeedback = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "created_at");
    __publicField(this, "feedback_generated_at");
    __publicField(this, "messages");
    __publicField(this, "resource_id");
    __publicField(this, "resource_type");
    __publicField(this, "state");
    __publicField(this, "updated_at");
  }
  static async all({ session, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: {},
      params: { ...otherArgs }
    });
    return response;
  }
};
__publicField(ResourceFeedback, "apiVersion", ApiVersion.July24);
__publicField(ResourceFeedback, "hasOne", {});
__publicField(ResourceFeedback, "hasMany", {});
__publicField(ResourceFeedback, "paths", [
  { "http_method": "get", "operation": "get", "ids": [], "path": "resource_feedback.json" },
  { "http_method": "post", "operation": "post", "ids": [], "path": "resource_feedback.json" }
]);
__publicField(ResourceFeedback, "resourceNames", [
  {
    "singular": "resource_feedback",
    "plural": "resource_feedbacks"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/script_tag.mjs
var ScriptTag = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "event");
    __publicField(this, "src");
    __publicField(this, "cache");
    __publicField(this, "created_at");
    __publicField(this, "display_scope");
    __publicField(this, "id");
    __publicField(this, "updated_at");
  }
  static async find({ session, id, fields = null }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id },
      params: { "fields": fields }
    });
    return result.data ? result.data[0] : null;
  }
  static async delete({ session, id }) {
    const response = await this.request({
      http_method: "delete",
      operation: "delete",
      session,
      urlIds: { "id": id },
      params: {}
    });
    return response ? response.body : null;
  }
  static async all({ session, limit = null, since_id = null, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, src = null, fields = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: {},
      params: { "limit": limit, "since_id": since_id, "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "src": src, "fields": fields, ...otherArgs }
    });
    return response;
  }
  static async count({ session, src = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "get",
      operation: "count",
      session,
      urlIds: {},
      params: { "src": src, ...otherArgs },
      body: {},
      entity: null
    });
    return response ? response.body : null;
  }
};
__publicField(ScriptTag, "apiVersion", ApiVersion.July24);
__publicField(ScriptTag, "hasOne", {});
__publicField(ScriptTag, "hasMany", {});
__publicField(ScriptTag, "paths", [
  { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "script_tags/<id>.json" },
  { "http_method": "get", "operation": "count", "ids": [], "path": "script_tags/count.json" },
  { "http_method": "get", "operation": "get", "ids": [], "path": "script_tags.json" },
  { "http_method": "get", "operation": "get", "ids": ["id"], "path": "script_tags/<id>.json" },
  { "http_method": "post", "operation": "post", "ids": [], "path": "script_tags.json" },
  { "http_method": "put", "operation": "put", "ids": ["id"], "path": "script_tags/<id>.json" }
]);
__publicField(ScriptTag, "resourceNames", [
  {
    "singular": "script_tag",
    "plural": "script_tags"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/shipping_zone.mjs
var ShippingZone = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "carrier_shipping_rate_providers");
    __publicField(this, "countries");
    __publicField(this, "id");
    __publicField(this, "location_group_id");
    __publicField(this, "name");
    __publicField(this, "price_based_shipping_rates");
    __publicField(this, "profile_id");
    __publicField(this, "provinces");
    __publicField(this, "weight_based_shipping_rates");
  }
  static async all({ session, fields = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: {},
      params: { "fields": fields, ...otherArgs }
    });
    return response;
  }
};
__publicField(ShippingZone, "apiVersion", ApiVersion.July24);
__publicField(ShippingZone, "hasOne", {});
__publicField(ShippingZone, "hasMany", {
  "countries": Country,
  "provinces": Province
});
__publicField(ShippingZone, "paths", [
  { "http_method": "get", "operation": "get", "ids": [], "path": "shipping_zones.json" }
]);
__publicField(ShippingZone, "resourceNames", [
  {
    "singular": "shipping_zone",
    "plural": "shipping_zones"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/shop.mjs
var Shop = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "address1");
    __publicField(this, "address2");
    __publicField(this, "checkout_api_supported");
    __publicField(this, "city");
    __publicField(this, "country");
    __publicField(this, "country_code");
    __publicField(this, "country_name");
    __publicField(this, "county_taxes");
    __publicField(this, "created_at");
    __publicField(this, "currency");
    __publicField(this, "customer_email");
    __publicField(this, "domain");
    __publicField(this, "eligible_for_card_reader_giveaway");
    __publicField(this, "eligible_for_payments");
    __publicField(this, "email");
    __publicField(this, "enabled_presentment_currencies");
    __publicField(this, "finances");
    __publicField(this, "force_ssl");
    __publicField(this, "google_apps_domain");
    __publicField(this, "google_apps_login_enabled");
    __publicField(this, "has_discounts");
    __publicField(this, "has_gift_cards");
    __publicField(this, "has_storefront");
    __publicField(this, "iana_timezone");
    __publicField(this, "id");
    __publicField(this, "latitude");
    __publicField(this, "longitude");
    __publicField(this, "marketing_sms_consent_enabled_at_checkout");
    __publicField(this, "money_format");
    __publicField(this, "money_in_emails_format");
    __publicField(this, "money_with_currency_format");
    __publicField(this, "money_with_currency_in_emails_format");
    __publicField(this, "multi_location_enabled");
    __publicField(this, "myshopify_domain");
    __publicField(this, "name");
    __publicField(this, "password_enabled");
    __publicField(this, "phone");
    __publicField(this, "plan_display_name");
    __publicField(this, "plan_name");
    __publicField(this, "pre_launch_enabled");
    __publicField(this, "primary_locale");
    __publicField(this, "primary_location_id");
    __publicField(this, "province");
    __publicField(this, "province_code");
    __publicField(this, "requires_extra_payments_agreement");
    __publicField(this, "setup_required");
    __publicField(this, "shop_owner");
    __publicField(this, "source");
    __publicField(this, "tax_shipping");
    __publicField(this, "taxes_included");
    __publicField(this, "timezone");
    __publicField(this, "transactional_sms_disabled");
    __publicField(this, "updated_at");
    __publicField(this, "weight_unit");
    __publicField(this, "zip");
  }
  static async current({ session, fields = null, ...otherArgs }) {
    const result = await this.baseFind({
      session,
      urlIds: {},
      params: { "fields": fields, ...otherArgs }
    });
    return result.data ? result.data[0] : null;
  }
  static async all({ session, fields = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: {},
      params: { "fields": fields, ...otherArgs }
    });
    return response;
  }
};
__publicField(Shop, "apiVersion", ApiVersion.July24);
__publicField(Shop, "hasOne", {});
__publicField(Shop, "hasMany", {});
__publicField(Shop, "paths", [
  { "http_method": "get", "operation": "get", "ids": [], "path": "shop.json" }
]);
__publicField(Shop, "resourceNames", [
  {
    "singular": "shop",
    "plural": "shops"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/smart_collection.mjs
var SmartCollection = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "rules");
    __publicField(this, "title");
    __publicField(this, "body_html");
    __publicField(this, "disjunctive");
    __publicField(this, "handle");
    __publicField(this, "id");
    __publicField(this, "image");
    __publicField(this, "published_at");
    __publicField(this, "published_scope");
    __publicField(this, "sort_order");
    __publicField(this, "template_suffix");
    __publicField(this, "updated_at");
  }
  static async find({ session, id, fields = null }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id },
      params: { "fields": fields }
    });
    return result.data ? result.data[0] : null;
  }
  static async delete({ session, id }) {
    const response = await this.request({
      http_method: "delete",
      operation: "delete",
      session,
      urlIds: { "id": id },
      params: {}
    });
    return response ? response.body : null;
  }
  static async all({ session, limit = null, ids = null, since_id = null, title = null, product_id = null, handle = null, updated_at_min = null, updated_at_max = null, published_at_min = null, published_at_max = null, published_status = null, fields = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: {},
      params: { "limit": limit, "ids": ids, "since_id": since_id, "title": title, "product_id": product_id, "handle": handle, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "published_at_min": published_at_min, "published_at_max": published_at_max, "published_status": published_status, "fields": fields, ...otherArgs }
    });
    return response;
  }
  static async count({ session, title = null, product_id = null, updated_at_min = null, updated_at_max = null, published_at_min = null, published_at_max = null, published_status = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "get",
      operation: "count",
      session,
      urlIds: {},
      params: { "title": title, "product_id": product_id, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "published_at_min": published_at_min, "published_at_max": published_at_max, "published_status": published_status, ...otherArgs },
      body: {},
      entity: null
    });
    return response ? response.body : null;
  }
  async order({ products = null, sort_order = null, body = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "put",
      operation: "order",
      session: this.session,
      urlIds: { "id": this.id },
      params: { "products": products, "sort_order": sort_order, ...otherArgs },
      body,
      entity: this
    });
    return response ? response.body : null;
  }
};
__publicField(SmartCollection, "apiVersion", ApiVersion.July24);
__publicField(SmartCollection, "hasOne", {});
__publicField(SmartCollection, "hasMany", {});
__publicField(SmartCollection, "paths", [
  { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "smart_collections/<id>.json" },
  { "http_method": "get", "operation": "count", "ids": [], "path": "smart_collections/count.json" },
  { "http_method": "get", "operation": "get", "ids": [], "path": "smart_collections.json" },
  { "http_method": "get", "operation": "get", "ids": ["id"], "path": "smart_collections/<id>.json" },
  { "http_method": "post", "operation": "post", "ids": [], "path": "smart_collections.json" },
  { "http_method": "put", "operation": "order", "ids": ["id"], "path": "smart_collections/<id>/order.json" },
  { "http_method": "put", "operation": "put", "ids": ["id"], "path": "smart_collections/<id>.json" }
]);
__publicField(SmartCollection, "resourceNames", [
  {
    "singular": "smart_collection",
    "plural": "smart_collections"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/storefront_access_token.mjs
var StorefrontAccessToken = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "title");
    __publicField(this, "access_scope");
    __publicField(this, "access_token");
    __publicField(this, "created_at");
    __publicField(this, "id");
  }
  static async delete({ session, id }) {
    const response = await this.request({
      http_method: "delete",
      operation: "delete",
      session,
      urlIds: { "id": id },
      params: {}
    });
    return response ? response.body : null;
  }
  static async all({ session, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: {},
      params: { ...otherArgs }
    });
    return response;
  }
};
__publicField(StorefrontAccessToken, "apiVersion", ApiVersion.July24);
__publicField(StorefrontAccessToken, "hasOne", {});
__publicField(StorefrontAccessToken, "hasMany", {});
__publicField(StorefrontAccessToken, "paths", [
  { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "storefront_access_tokens/<id>.json" },
  { "http_method": "get", "operation": "get", "ids": [], "path": "storefront_access_tokens.json" },
  { "http_method": "post", "operation": "post", "ids": [], "path": "storefront_access_tokens.json" }
]);
__publicField(StorefrontAccessToken, "resourceNames", [
  {
    "singular": "storefront_access_token",
    "plural": "storefront_access_tokens"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/tender_transaction.mjs
var TenderTransaction = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "amount");
    __publicField(this, "currency");
    __publicField(this, "id");
    __publicField(this, "order_id");
    __publicField(this, "payment_details");
    __publicField(this, "payment_method");
    __publicField(this, "processed_at");
    __publicField(this, "remote_reference");
    __publicField(this, "test");
    __publicField(this, "user_id");
  }
  static async all({ session, limit = null, since_id = null, processed_at_min = null, processed_at_max = null, processed_at = null, order = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: {},
      params: { "limit": limit, "since_id": since_id, "processed_at_min": processed_at_min, "processed_at_max": processed_at_max, "processed_at": processed_at, "order": order, ...otherArgs }
    });
    return response;
  }
};
__publicField(TenderTransaction, "apiVersion", ApiVersion.July24);
__publicField(TenderTransaction, "hasOne", {});
__publicField(TenderTransaction, "hasMany", {});
__publicField(TenderTransaction, "paths", [
  { "http_method": "get", "operation": "get", "ids": [], "path": "tender_transactions.json" }
]);
__publicField(TenderTransaction, "resourceNames", [
  {
    "singular": "tender_transaction",
    "plural": "tender_transactions"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/theme.mjs
var Theme = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "created_at");
    __publicField(this, "id");
    __publicField(this, "name");
    __publicField(this, "previewable");
    __publicField(this, "processing");
    __publicField(this, "role");
    __publicField(this, "src");
    __publicField(this, "theme_store_id");
    __publicField(this, "updated_at");
  }
  static async find({ session, id, fields = null }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id },
      params: { "fields": fields }
    });
    return result.data ? result.data[0] : null;
  }
  static async delete({ session, id }) {
    const response = await this.request({
      http_method: "delete",
      operation: "delete",
      session,
      urlIds: { "id": id },
      params: {}
    });
    return response ? response.body : null;
  }
  static async all({ session, fields = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: {},
      params: { "fields": fields, ...otherArgs }
    });
    return response;
  }
};
__publicField(Theme, "apiVersion", ApiVersion.July24);
__publicField(Theme, "hasOne", {});
__publicField(Theme, "hasMany", {});
__publicField(Theme, "paths", [
  { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "themes/<id>.json" },
  { "http_method": "get", "operation": "get", "ids": [], "path": "themes.json" },
  { "http_method": "get", "operation": "get", "ids": ["id"], "path": "themes/<id>.json" },
  { "http_method": "post", "operation": "post", "ids": [], "path": "themes.json" },
  { "http_method": "put", "operation": "put", "ids": ["id"], "path": "themes/<id>.json" }
]);
__publicField(Theme, "resourceNames", [
  {
    "singular": "theme",
    "plural": "themes"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/usage_charge.mjs
var UsageCharge = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "created_at");
    __publicField(this, "currency");
    __publicField(this, "description");
    __publicField(this, "id");
    __publicField(this, "price");
    __publicField(this, "recurring_application_charge_id");
    __publicField(this, "updated_at");
  }
  static async find({ session, id, recurring_application_charge_id = null, fields = null }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id, "recurring_application_charge_id": recurring_application_charge_id },
      params: { "fields": fields }
    });
    return result.data ? result.data[0] : null;
  }
  static async all({ session, recurring_application_charge_id = null, fields = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: { "recurring_application_charge_id": recurring_application_charge_id },
      params: { "fields": fields, ...otherArgs }
    });
    return response;
  }
};
__publicField(UsageCharge, "apiVersion", ApiVersion.July24);
__publicField(UsageCharge, "hasOne", {
  "currency": Currency
});
__publicField(UsageCharge, "hasMany", {});
__publicField(UsageCharge, "paths", [
  { "http_method": "get", "operation": "get", "ids": ["recurring_application_charge_id"], "path": "recurring_application_charges/<recurring_application_charge_id>/usage_charges.json" },
  { "http_method": "get", "operation": "get", "ids": ["recurring_application_charge_id", "id"], "path": "recurring_application_charges/<recurring_application_charge_id>/usage_charges/<id>.json" },
  { "http_method": "post", "operation": "post", "ids": ["recurring_application_charge_id"], "path": "recurring_application_charges/<recurring_application_charge_id>/usage_charges.json" }
]);
__publicField(UsageCharge, "resourceNames", [
  {
    "singular": "usage_charge",
    "plural": "usage_charges"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/user.mjs
var User = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "account_owner");
    __publicField(this, "bio");
    __publicField(this, "email");
    __publicField(this, "first_name");
    __publicField(this, "id");
    __publicField(this, "im");
    __publicField(this, "last_name");
    __publicField(this, "locale");
    __publicField(this, "permissions");
    __publicField(this, "phone");
    __publicField(this, "receive_announcements");
    __publicField(this, "screen_name");
    __publicField(this, "url");
    __publicField(this, "user_type");
  }
  static async find({ session, id }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id },
      params: {}
    });
    return result.data ? result.data[0] : null;
  }
  static async all({ session, limit = null, page_info = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: {},
      params: { "limit": limit, "page_info": page_info, ...otherArgs }
    });
    return response;
  }
  static async current({ session, ...otherArgs }) {
    const response = await this.request({
      http_method: "get",
      operation: "current",
      session,
      urlIds: {},
      params: { ...otherArgs },
      body: {},
      entity: null
    });
    return response ? response.body : null;
  }
};
__publicField(User, "apiVersion", ApiVersion.July24);
__publicField(User, "hasOne", {});
__publicField(User, "hasMany", {});
__publicField(User, "paths", [
  { "http_method": "get", "operation": "current", "ids": [], "path": "users/current.json" },
  { "http_method": "get", "operation": "get", "ids": [], "path": "users.json" },
  { "http_method": "get", "operation": "get", "ids": ["id"], "path": "users/<id>.json" }
]);
__publicField(User, "resourceNames", [
  {
    "singular": "user",
    "plural": "users"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/webhook.mjs
var Webhook = class extends Base {
  constructor() {
    super(...arguments);
    __publicField(this, "address");
    __publicField(this, "topic");
    __publicField(this, "api_version");
    __publicField(this, "created_at");
    __publicField(this, "fields");
    __publicField(this, "format");
    __publicField(this, "id");
    __publicField(this, "metafield_namespaces");
    __publicField(this, "private_metafield_namespaces");
    __publicField(this, "updated_at");
  }
  static async find({ session, id, fields = null }) {
    const result = await this.baseFind({
      session,
      requireIds: true,
      urlIds: { "id": id },
      params: { "fields": fields }
    });
    return result.data ? result.data[0] : null;
  }
  static async delete({ session, id }) {
    const response = await this.request({
      http_method: "delete",
      operation: "delete",
      session,
      urlIds: { "id": id },
      params: {}
    });
    return response ? response.body : null;
  }
  static async all({ session, address = null, created_at_max = null, created_at_min = null, fields = null, limit = null, since_id = null, topic = null, updated_at_min = null, updated_at_max = null, ...otherArgs }) {
    const response = await this.baseFind({
      session,
      urlIds: {},
      params: { "address": address, "created_at_max": created_at_max, "created_at_min": created_at_min, "fields": fields, "limit": limit, "since_id": since_id, "topic": topic, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, ...otherArgs }
    });
    return response;
  }
  static async count({ session, address = null, topic = null, ...otherArgs }) {
    const response = await this.request({
      http_method: "get",
      operation: "count",
      session,
      urlIds: {},
      params: { "address": address, "topic": topic, ...otherArgs },
      body: {},
      entity: null
    });
    return response ? response.body : null;
  }
};
__publicField(Webhook, "apiVersion", ApiVersion.July24);
__publicField(Webhook, "hasOne", {});
__publicField(Webhook, "hasMany", {});
__publicField(Webhook, "paths", [
  { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "webhooks/<id>.json" },
  { "http_method": "get", "operation": "count", "ids": [], "path": "webhooks/count.json" },
  { "http_method": "get", "operation": "get", "ids": [], "path": "webhooks.json" },
  { "http_method": "get", "operation": "get", "ids": ["id"], "path": "webhooks/<id>.json" },
  { "http_method": "post", "operation": "post", "ids": [], "path": "webhooks.json" },
  { "http_method": "put", "operation": "put", "ids": ["id"], "path": "webhooks/<id>.json" }
]);
__publicField(Webhook, "resourceNames", [
  {
    "singular": "webhook",
    "plural": "webhooks"
  }
]);

// node_modules/@shopify/shopify-api/dist/esm/rest/admin/2024-07/index.mjs
var restResources = {
  AbandonedCheckout,
  AccessScope,
  ApplePayCertificate,
  ApplicationCharge,
  ApplicationCredit,
  Article,
  Asset,
  AssignedFulfillmentOrder,
  Balance,
  Blog,
  CancellationRequest,
  CarrierService,
  Checkout,
  Collect,
  Collection,
  CollectionListing,
  Comment,
  Country,
  Currency,
  CustomCollection,
  Customer,
  CustomerAddress,
  DeprecatedApiCall,
  DiscountCode,
  Dispute,
  DisputeEvidence,
  DisputeFileUpload,
  DraftOrder,
  Event,
  Fulfillment,
  FulfillmentEvent,
  FulfillmentOrder,
  FulfillmentRequest,
  FulfillmentService,
  GiftCard,
  GiftCardAdjustment,
  Image,
  InventoryItem,
  InventoryLevel,
  Location,
  LocationsForMove,
  MarketingEvent,
  Metafield,
  MobilePlatformApplication,
  Order,
  OrderRisk,
  Page,
  Payment,
  PaymentGateway,
  PaymentTransaction,
  Payout,
  Policy,
  PriceRule,
  Product,
  ProductListing,
  ProductResourceFeedback,
  Province,
  RecurringApplicationCharge,
  Redirect,
  Refund,
  ResourceFeedback,
  ScriptTag,
  ShippingZone,
  Shop,
  SmartCollection,
  StorefrontAccessToken,
  TenderTransaction,
  Theme,
  Transaction,
  UsageCharge,
  User,
  Variant,
  Webhook
};
export {
  restResources
};
//# sourceMappingURL=@shopify_shopify-api_rest_admin_2024-07.js.map
